# running complex.py
[] :python-answer """sqrt(-1) = I""".
[] :python-answer """exp(I*pi) + 1 = 0""".
[] :python-answer """log(-1) = I*pi""".
[] :python-answer """log(-I) = -I*pi/2""".
[] :python-answer """log(I*x) = log(I*x)""".
[] :python-answer """cos(I*x) = cosh(x)""".
[] :python-answer """sin(I*x) = I*sinh(x)""".
[] :python-answer """asin(I*x) = I*asinh(x)""".
[] :python-answer """N(sqrt(I)) = 0.707106781186548 + 0.707106781186548*I""".
[] :python-answer """N(acos(2)) = 1.31695789692482*I""".
[] :python-answer """N(asin(2)) = 1.5707963267949 - 1.31695789692482*I""".
[] :python-answer """N(I**I, 136) = 0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353405217733072350218081906197303746640""".

# running derivative.py
[] :python-answer """diff(cos(x), x) = -sin(x)""".
[] :python-answer """diff(x**4, x, x, x) = 24*x""".
[] :python-answer """diff(exp(x*y*z), x, y, y, z, z, z, z) = x**3*y**2*(x**3*y**3*z**3 + 14*x**2*y**2*z**2 + 52*x*y*z + 48)*exp(x*y*z)""".
[] :python-answer """diff((x + 1)*((x**2 + 2)*(x**3 + 3)), x) = 3*x**2*(x + 1)*(x**2 + 2) + 2*x*(x + 1)*(x**3 + 3) + (x**2 + 2)*(x**3 + 3)""".
[] :python-answer """diff(x/x/x/x/x/x/x/x/x/x, x) = -8/x**9""".
[] :python-answer """diff(log(log(log(log(log(log(log(log(log(log(x)))))))))), x) = 1/(x*log(x)*log(log(x))*log(log(log(x)))*log(log(log(log(x))))*log(log(log(log(log(x)))))*log(log(log(log(log(log(x))))))*log(log(log(log(log(log(log(x)))))))*log(log(log(log(log(log(log(log(x))))))))*log(log(log(log(log(log(log(log(log(x))))))))))""".
[] :python-answer """diff(x*x*x*x*x*x*x*x*x*x, x) = 10*x**9""".
[] :python-answer """Matrix([x**3 + 5*y**4 - 9*z, exp(x*y*z)]).jacobian([x, y, z]) = Matrix([[3*x**2, 20*y**3, -9], [y*z*exp(x*y*z), x*z*exp(x*y*z), x*y*exp(x*y*z)]])""".
[] :python-answer """hessian(x**3 + 5*y**4 - 9*z, [x, y, z]) = Matrix([[6*x, 0, 0], [0, 60*y**2, 0], [0, 0, 0]])""".

# running dt.py
[] :python-answer """dt_answer = [('i', 'n1'), ('i', 'n10'), ('i', 'n100'), ('i', 'n1000'), ('i', 'n10000')]""".

# running equation.py
[] :python-answer """solve(x**2 - 1, x) = [-1, 1]""".
[] :python-answer """solve(x**2 + 1, x) = [-I, I]""".
[] :python-answer """solve(x**2 - 3*x + 2, x) = [1, 2]""".
[] :python-answer """solve(cos(x)*(1 - 2*sin(x)), x) = [pi/6, pi/2, 5*pi/6, 3*pi/2]""".
[] :python-answer """solve(2**(2*x) - 5*2**(x + 1) + 16, x) = [1, 3]""".
[] :python-answer """linsolve([3*x + 2*y - z - 1, 2*x - 2*y + 4*z + 2, - x + y/2 - z], x, y, z) = {(1, -2, -2)}""".
[] :python-answer """nonlinsolve([x*y - 1, 4*x**2 + y**2 - 5], x, y) = {(-1, -1), (-1/2, -2), (1/2, 2), (1, 1)}""".

# running fft.py
[] :python-answer """fft([0, 1, 2, 3, 4, 5, 6, 7]) = [28, -4 - 4*sqrt(2)*I - 4*I, -4 - 4*I, -4 - 4*sqrt(2)*I + 4*I, -4, -4 - 4*I + 4*sqrt(2)*I, -4 + 4*I, -4 + 4*I + 4*sqrt(2)*I]""".
[] :python-answer """fft([0, 1, 2, 3, 0, 1, 2, 3]) = [12, 0, -4 - 4*I, 0, -4, 0, -4 + 4*I, 0]""".
[] :python-answer """fft([0, 1, 0, 1, 0, 1, 0, 1]) = [4, 0, 0, 0, -4, 0, 0, 0]""".
[] :python-answer """fft([0, 0, 0, 0, 0, 0, 0, 0]) = [0, 0, 0, 0, 0, 0, 0, 0]""".

# running fibonacci.py
[] :python-answer """fibonacci(0) = 0""".
[] :python-answer """fibonacci(1) = 1""".
[] :python-answer """fibonacci(6) = 8""".
[] :python-answer """fibonacci(91) = 4660046610375530309""".
[] :python-answer """fibonacci(283) = 62232491515607091882574410635924603070626544377175485625797""".
[] :python-answer """fibonacci(3674) = 295872959797101479478634366815157108100573212705250690577871041398423606408217262643449728342664061812585639168722421830407677671667740585806703531229882783069925750619720511808616484846128237251921414441458265138672827487722512845223115526738192067144721087756159352711138340620702266509343657403678256247195010013499661223527119909308682062873140767135468966093474944529418214755911968500799987099146489838560114063096775586903976827512299123202488315139397181279903459556726060805948910609527571241968534269554079076649680403030083743420820438603816095671532163428933363322524736324029745871445486444623006627119156710782085648303485296149604974010598940800770684835758031137479033374229914629583184427269638360355586190323578625395157899987377625662075558684705457""".

# running graph.py
[] :python-answer """path = [('paris', 'orleans'), ('paris', 'chartres'), ('paris', 'amiens'), ('orleans', 'blois'), ('orleans', 'bourges'), ('blois', 'tours'), ('chartres', 'lemans'), ('lemans', 'angers'), ('lemans', 'tours'), ('angers', 'nantes'), ('paris', 'blois'), ('paris', 'bourges'), ('paris', 'lemans'), ('orleans', 'tours'), ('chartres', 'angers'), ('chartres', 'tours'), ('lemans', 'nantes'), ('paris', 'tours'), ('paris', 'angers'), ('chartres', 'nantes'), ('paris', 'nantes')]""".

# running graycode.py
[] :python-answer """list(GrayCode(2).generate_gray()) = ['00', '01', '11', '10']""".
[] :python-answer """list(GrayCode(3).generate_gray()) = ['000', '001', '011', '010', '110', '111', '101', '100']""".
[] :python-answer """list(GrayCode(4).generate_gray()) = ['0000', '0001', '0011', '0010', '0110', '0111', '0101', '0100', '1100', '1101', '1111', '1110', '1010', '1011', '1001', '1000']""".

# running grover.py
[] :python-answer """qapply(OracleGate(2, lambda qubits: qubits == IntQubit(2))*IntQubit(2)) = -|2>""".
[] :python-answer """qapply(OracleGate(2, lambda qubits: qubits == IntQubit(2))*IntQubit(3)) = |3>""".
[] :python-answer """qapply(grover_iteration(superposition_basis(2), OracleGate(2, lambda qubits: qubits == IntQubit(2)))) = |2>""".
[] :python-answer """qapply(grover_iteration(superposition_basis(4), OracleGate(4, lambda qubits: qubits == IntQubit(2)))) = |0>/4 + |1>/4 + |2>/4 + |3>/4 + |4>/4 + |5>/4 + |6>/4 + |7>/4 + |8>/4 + |9>/4 + |10>/4 + |11>/4 + |12>/4 + |13>/4 + |14>/4 + |15>/4""".

# running integral.py
[] :python-answer """integrate(exp(-x**2), (x, -oo, oo)) = sqrt(pi)""".
[] :python-answer """integrate(1/(1 + x**2), (x, -oo, oo)) = pi""".

# running limit.py
[] :python-answer """limit(sin(x)/x, x, oo) = 0""".
[] :python-answer """limit(1/x, x, 0) = oo""".
[] :python-answer """limit(1/x, x, 0, dir='-') = -oo""".

# running matrix.py
[] :python-answer """Matrix([[1, 3], [-2, 3]])*Matrix([[0, 3], [0, 7]]) = Matrix([[0, 24], [0, 15]])""".
[] :python-answer """Matrix([[1, 3], [-2, 3]])**2 = Matrix([[-5, 12], [-8, 3]])""".
[] :python-answer """Matrix([[1, 3], [-2, 3]])**-1 = Matrix([[1/3, -1/3], [2/9, 1/9]])""".
[] :python-answer """Matrix([[1, 0, 1], [2, -1, 3], [4, 3, 2]]).det() = -1""".
[] :python-answer """Matrix([[3, -2,  4, -2], [5,  3, -3, -2], [5, -2,  2, -2], [5, -2, -3,  3]]).eigenvals() = {3: 1, -2: 1, 5: 2}""".

# running padovan.py
[] :python-answer """padovan(0) = 1""".
[] :python-answer """padovan(1) = 1""".
[] :python-answer """padovan(2) = 1""".
[] :python-answer """padovan(3) = 2""".
[] :python-answer """padovan(4) = 2""".
[] :python-answer """padovan(5) = 3""".
[] :python-answer """padovan(6) = 4""".
[] :python-answer """padovan(91) = 93722435101""".
[] :python-answer """padovan(283) = 26274887475339825451279161803853426""".
[] :python-answer """padovan(3674) = 34679254800529731192125750703158361602001263844169823634150556913547537848548216563404768515287289331096132827755850902602792053483521287103339428854927738542875174580144824669578918004731162306612640225159034521829331180103713501736008407604589934479956159441460831787210752174947472794968395377624685577050845599368475557348572282204098532578140017970482589594045332855630650080536652423069543264115696727254791940293614169533811494434796604402716""".

# running polygon.py
[] :python-answer """Polygon((0, 0), (2, 0), (0, 1), (0, 0)).area = 1""".
[] :python-answer """Polygon((3, 2), (6, 2), (7, 6), (4, 6), (5, 5), (5, 3), (3, 2)).area = 15/2""".

# running polynomial.py
[] :python-answer """solve(x - 2, x) = [2]""".
[] :python-answer """solve(x**4 - 10*x**3 + 35*x**2 - 50*x + 24, x) = [1, 2, 3, 4]""".
[] :python-answer """solve(x**4 + (-9 - 5*I)*x**3 + (14 + 33*I)*x**2 + (24 - 44*I)*x - 26, x) = [I, 1 + I, 3 + 2*I, 5 + I]""".
[] :python-answer """solve_poly_system([x*y - 2*y, 2*y**2 - x**2], x, y) = [(0, 0), (2, -sqrt(2)), (2, sqrt(2))]""".

# running prime.py
[] :python-answer """list(primerange(0, 100)) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]""".
[] :python-answer """list(primerange(1000000, 1000100)) = [1000003, 1000033, 1000037, 1000039, 1000081, 1000099]""".
[] :python-answer """isprime(6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151) = True""".
[] :python-answer """nextprime(6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151) = 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115058039""".
[] :python-answer """totient(271) = 270""".
[] :python-answer """totient(2718281) = 2718280""".
[] :python-answer """totient(27182818284) = 8994800640""".
[] :python-answer """totient(271828182845904) = 87459116512768""".
[] :python-answer """totient(2718281828459045235360287471352662497757247) = 1811056085631168661171087103167285546745856""".

# running socrates.py
[] :python-answer """element_of = [('socrates', 'man'), ('socrates', 'human'), ('socrates', 'mortal')]""".

