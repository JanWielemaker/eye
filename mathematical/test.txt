# running complex.pl
exponentiation([-1,0],[0.5,0],[6.123233995736766e-17,1.0])
exponentiation([e,0],[0,pi],[-1.0,1.2246467991473532e-16])

# running derivative.pl
derivative((x+1)*((x^2+2)*(x^3+3)),x,(x^2+2)*(x^3+3)+(x+1)*(2*x*(x^3+3)+(x^2+2)*(3*x^2)))
derivative(x/x/x/x/x/x/x/x/x/x,x,(((((((((x-x)/x^2*x-x/x)/x^2*x-x/x/x)/x^2*x-x/x/x/x)/x^2*x-x/x/x/x/x)/x^2*x-x/x/x/x/x/x)/x^2*x-x/x/x/x/x/x/x)/x^2*x-x/x/x/x/x/x/x/x)/x^2*x-x/x/x/x/x/x/x/x/x)/x^2)
derivative(log(log(log(log(log(log(log(log(log(log(x)))))))))),x,1/x/log(x)/log(log(x))/log(log(log(x)))/log(log(log(log(x))))/log(log(log(log(log(x)))))/log(log(log(log(log(log(x))))))/log(log(log(log(log(log(log(x)))))))/log(log(log(log(log(log(log(log(x))))))))/log(log(log(log(log(log(log(log(log(x))))))))))
derivative(x*x*x*x*x*x*x*x*x*x,x,((((((((x+x)*x+x*x)*x+x*x*x)*x+x*x*x*x)*x+x*x*x*x*x)*x+x*x*x*x*x*x)*x+x*x*x*x*x*x*x)*x+x*x*x*x*x*x*x*x)*x+x*x*x*x*x*x*x*x*x)
integral(1*6*x^5,x,x^6)
integral(1*sqrt(pi)/2*exp(-x^2),x,erf(x))

# running easter.pl
easter(2021,4,4)
easter(2022,4,17)
easter(2023,4,9)
easter(2024,3,31)
easter(2025,4,20)
easter(2026,4,5)
easter(2027,3,28)
easter(2028,4,16)
easter(2029,4,1)
easter(2030,4,21)
easter(2031,4,13)
easter(2032,3,28)
easter(2033,4,17)
easter(2034,4,9)
easter(2035,3,25)
easter(2036,4,13)
easter(2037,4,5)
easter(2038,4,25)
easter(2039,4,10)
easter(2040,4,1)
easter(2041,4,21)
easter(2042,4,6)
easter(2043,3,29)
easter(2044,4,17)
easter(2045,4,9)
easter(2046,3,25)
easter(2047,4,14)
easter(2048,4,5)
easter(2049,4,18)
easter(2050,4,10)

# running equation4.pl
racines([[1,0],[-10,0],[35,0],[-50,0],[24,0]],[[4.0000000074505806,0.0],[2.9999999925494194,0.0],[1.9999999925494194,0.0],[1.0000000074505806,0.0]])
racines([[1,0],[-9,-5],[14,33],[24,-44],[-26,0]],[[3.0000000000000036,2.0000000000000009],[5.0000000000000053,0.99999999999999267],[-5.773159728050814e-15,1.0000000000000027],[0.99999999999999623,1.0000000000000036]])

# running equation.pl
solve_equation(x^2-3*x+2=0,x,x=(- -3+sqrt(1))/(2*1))
solve_equation(x^2-3*x+2=0,x,x=(- -3-sqrt(1))/(2*1))
solve_equation(cos(x)*(1-2*sin(x))=0,x,x=acos(0))
solve_equation(cos(x)*(1-2*sin(x))=0,x,x=-acos(0))
solve_equation(cos(x)*(1-2*sin(x))=0,x,x=asin((1-0)/2))
solve_equation(cos(x)*(1-2*sin(x))=0,x,x=180-asin((1-0)/2))
solve_equation(2^(2*x)-5*2^(x+1)+16=0,x,x=log((- -10+sqrt(36))/(2*1))/log(2))
solve_equation(2^(2*x)-5*2^(x+1)+16=0,x,x=log((- -10-sqrt(36))/(2*1))/log(2))

# running fft.pl
fft([0,1,2,3,4,5,6,7],[n(64,op(+,49,63)),n(63,op(*,62,52)),n(62,w^7),n(61,op(+,42,60)),n(60,op(*,47,44)),n(59,op(+,31,58)),n(58,op(*,57,38)),n(57,w^5),n(56,op(+,11,55)),n(55,op(*,24,21)),n(54,op(+,49,53)),n(53,op(*,50,52)),n(52,op(+,34,51)),n(51,op(*,47,36)),n(50,w^3),n(49,op(+,26,48)),n(48,op(*,47,29)),n(47,w^6),n(46,op(+,42,45)),n(45,op(*,27,44)),n(44,op(+,15,43)),n(43,op(*,24,19)),n(42,op(+,5,41)),n(41,op(*,24,9)),n(40,op(+,31,39)),n(39,op(*,32,38)),n(38,op(+,34,37)),n(37,op(*,27,36)),n(36,op(+,16,35)),n(35,op(*,24,17)),n(34,op(+,12,33)),n(33,op(*,24,13)),n(32,w^1),n(31,op(+,26,30)),n(30,op(*,27,29)),n(29,op(+,6,28)),n(28,op(*,24,7)),n(27,w^2),n(26,op(+,1,25)),n(25,op(*,24,3)),n(24,w^4),n(23,op(+,11,22)),n(22,op(*,2,21)),n(21,op(+,15,20)),n(20,op(*,2,19)),n(19,op(+,16,18)),n(18,op(*,2,17)),n(17,a(7)),n(16,a(3)),n(15,op(+,12,14)),n(14,op(*,2,13)),n(13,a(5)),n(12,a(1)),n(11,op(+,5,10)),n(10,op(*,2,9)),n(9,op(+,6,8)),n(8,op(*,2,7)),n(7,a(6)),n(6,a(2)),n(5,op(+,1,4)),n(4,op(*,2,3)),n(3,a(4)),n(2,w^0),n(1,a(0))])

# running fibonacci.pl
fibonacci(0,1)
fibonacci(1,1)
fibonacci(13,377)
fibonacci(65,27777890035288)

# running gcc.pl
testgcc([1,1,1,1,1,1,1,1,1],s(0,0,0),[s(0,0,1),s(0,1,1),s(0,1,0),s(1,1,0),s(1,1,1),s(1,0,1),s(1,0,0),s(0,0,0),s(0,0,1)])

# running lee.pl
route([1,1],[9,8],[[[2,3],[4,5]],[[6,6],[8,8]]],[[1,1],[1,2],[2,2],[3,2],[4,2],[5,2],[5,3],[5,4],[5,5],[6,5],[7,5],[8,5],[9,5],[9,6],[9,7],[9,8]])

# running pi.pl
pi(100000,3.1415926535897918)

# running polygon.pl
area([[3,2],[6,2],[7,6],[4,6],[5,5],[5,3],[3,2]],7.5)

# running primes.pl
prime(2)
prime(3)
prime(5)
prime(7)
prime(11)
prime(13)
prime(17)
prime(19)
prime(23)
prime(29)
prime(31)
prime(37)
prime(41)
prime(43)
prime(47)
prime(53)
prime(59)
prime(61)
prime(67)
prime(71)
prime(73)
prime(79)
prime(83)
prime(89)
prime(97)
prime(1009)
prime(1013)
prime(1019)
prime(1021)
prime(1031)
prime(1033)
prime(1039)
prime(1049)
prime(1051)
prime(1061)
prime(1063)
prime(1069)
prime(1087)
prime(1091)
prime(1093)
prime(1097)
prime(1000003)
prime(1000033)
prime(1000037)
prime(1000039)
prime(1000081)
prime(1000099)

# running tak.pl
tak(34,13,8,13)

# running totient.pl
totient(271828182845904,87459116512768)

# running turing.pl
compute([1,0,1,0,0,1],[1,0,1,0,1,0,#])
compute([1,0,1,1,1,1],[1,1,0,0,0,0,#])
compute([1,1,1,1,1,1],[1,0,0,0,0,0,0,#])
compute([],[1,#])

# running 4equations.py
4equations_solution_1 = [701, 155, 53, 1255]

# running complex.py
imaginary_unit = '(-1)**0.5 = (6.123233995736766e-17+1j)'
euler_identity = 'E**(I*pi) + 1 = 0'

# running easter.py
easter_2021 = '2021-04-04'
easter_2022 = '2022-04-17'
easter_2023 = '2023-04-09'
easter_2024 = '2024-03-31'
easter_2025 = '2025-04-20'
easter_2026 = '2026-04-05'
easter_2027 = '2027-03-28'
easter_2028 = '2028-04-16'
easter_2029 = '2029-04-01'
easter_2030 = '2030-04-21'
easter_2031 = '2031-04-13'
easter_2032 = '2032-03-28'
easter_2033 = '2033-04-17'
easter_2034 = '2034-04-09'
easter_2035 = '2035-03-25'
easter_2036 = '2036-04-13'
easter_2037 = '2037-04-05'
easter_2038 = '2038-04-25'
easter_2039 = '2039-04-10'
easter_2040 = '2040-04-01'
easter_2041 = '2041-04-21'
easter_2042 = '2042-04-06'
easter_2043 = '2043-03-29'
easter_2044 = '2044-04-17'
easter_2045 = '2045-04-09'
easter_2046 = '2046-03-25'
easter_2047 = '2047-04-14'
easter_2048 = '2048-04-05'
easter_2049 = '2049-04-18'
easter_2050 = '2050-04-10'

# running fibonacci.py
fibonacci_0 = 1
fibonacci_91 = 7540113804746346429
fibonacci_283 = 100694286476841731898333719576864360661213863366454327287613
fibonacci_3674 = 478732505303741385956404162345269858384744735877591245220155181425222583719052883909137058464486031445386821306651407715721324734656496647251457053851886221494227919117922121762759445109056363435769661016283973874009882426095042125170050552506439407003348815544330761584079400325135461550678193524079378861491450704396020972430999793292403017017483898367294476621937943974773294482313564414351612321712688966195460106059438547323207823437792403822551858544397854438499290008848427283999904470627694790572621142059740582469261837684610332863779365142229925216465377941388168082326549704808165258917845248614898837975480724751326240969762853171535705139586476456245058479704158211017314959533704159600834523154440762497873004614783236902025322702458152051015280133424450
fibonacci_29821 = 12020499997579279669116305555637388846572292844029395549342865155441078294690307511503749479168502311897170422698609577162433794155912710178955307811224003991513004370798060694882416985332465714740988827727130026077034098735833355975375594439096018281283780210925630070442728359675681819480815407569871781710706506563117409186477084106503416398119741465462373010159665853572300104896826908582751937431893457264802277958273510189219770316390540790121120870937510431799654928675915802094569818767800476397709653316529833363042503233587038379056086500639735741647744892086450970438339237864549937759926899493702397355111737946265510832530663047443842285637300706546458693518536051521314153511261825219138768720792748989415876743521156098725993006610101952905286342638020622837591500103544781883799074557625337915433174940439285696396806039472345757482144375006868734723819289215345011008692424063844139532915360868918346445026518473177798457457607403376848238172144083100279350367847827400552265973905111086883270608576633002338574284553637016451381648527893090576889333295558325132641138371912270579031072451717587674259947745189047978624193573175293240733815922514014796977638576108533664421091114050137388475253968841744386395689936783957259764343905971384532193792295894168601500771699897187658593639430541415075224790760785663468379591998042087067808279422649672600280620625711517886775313801691989147329167224415494259763506934336674971486569710695114482123534110300351524100041427117416636333617592783137006478583851896475556591806831772749889719868008133363619822748690931661124882300858531690234698351621271810269618863208880082898151223677444081553406548764610393243132832843603917931517334040165094006995628700423192083922550456123734587444939922163563862847017548421872924489612879631853961000109888918316908595890883173150407429848540560051675861263845532757557449910912335169300793691256262435408730073214182093892563185381567645119204583478480199762798310741906162648375377670220975322264271140334884653844139709213074123824903830021174775072707452279386614068191409092650866927385511449108229458099333515548203693340067186774806723169193101150354506867065735896549752712002983785976470598278920967333451371787749493894008432658858872782312770478066909483210116587156201232084408481548755153574652799588420376016027906589413653555858689771534226017109228270461078590260070903335230231510054019737312988390868913267202559530314543227876355382089602480765653798188138060374704422375130933176225959902538806880409427582983315699830654823452325729686344454117512297067312043108081054125861624491989083251337290705722034026910368167881510089174657287997455692328896005022728509353956078046308823379666202752435960824273361269184701749577466030428756639801029270163829905499030351408451785322796382361129689323290757531721296924145783158062509794904921776780534997332963366321919049937482787821886571319647213079100401901082275076705444667118417249927226980309828575727409996784966591842076275976973411199017473402429741275836818266095726638907471082569127520780340334832364301183119014170794648043154807780252829078212561557727664604273818777501932133412567715402895517958707291469762362884414967745144683344965350255807983804495485595814121893836381901898364952468203556444667667682623000953730168670028477310589458954197645538784352021131059582566904959078276474562528574700902855923254140077982048903955707428123058074937201498007440611821528930522343529443740732248730104592361546323575324825950364944688245420644146874031841927498265633225817916874036979546673354230142369635510496937102530108055343283517995634687454850436729927370551792813973668786782321592425401335662914675249609421281225315832732907367461919059458879662937681635732158226628448289457855731034627258645825196054502389360177573836650109319751867723542368405453687616305515354128653193499307105840565002746824545400396558822372639002092114755393136889076306987483042063647254766077659344346231907254683280722920896891186438984773987504841339478797773181051562157544221620425748679550088139531302272735337652575536084148549726797192519252904984446807298686185990833924416158434734172826415261292049009895411106517054681583187500350501742937232845984280630004320688656816275345130491807150663098446623225178156818660518912568660719568639419119448360366223970868827327475836410995667224509285408269641945631256753206601098406412958164872024687127561552939225473647305283976560276281293553290453064277957155008632782283995784676291517259098141057679638648736081772014236349674226205009323618906554678389827645388376181023270218394586794642543735446418978860922509825833372890331725253820792915045545719862621815668155005384165883540048537350155305700915312668084625435336281368975429547036966261503699066080911469317006538139882901036701660053952565243276540551419378940041664308015564295744064763059084067014243303304906133991639012141709882850720240381654855997766818797154102094523430837928142926148132177966427747504834119369105377143614226501611945342537269115773873928695438854804018281525619757722248469953685844354665885932301176099793345373126820502953256827195616029751447073889585962592561485316634444205740302639191828537306026084716787602173215549468126665357063531895193294734629763371871448863410593745927016335557320863446167824058808186514214558944851754260617668250257286552177631474968196198818608427120430226194432973500585400101481223883332335933167356259667713440156967106450845492656934002065206918888239030069169934641285843436001885387850360550364683492407173166053486546148521776057840621240909754338443789554503280645392679443791650986622192197183533010849744176756557050188363548327024650063754038634724635186623769561917816794342062265214909327755624879239313549712388661551126624575702587571824244103564294748938080435925256326990417588991526054229186145663875879372068642636883635421379783862562296391114722888976726353766720677493556400554549033617523538760230841005776162308120488741448949349937687351427588395787922282918243350963942191522139261047991919891461092161084248937532398500819057231703120695386793867979917356630159100590322950121504297357423235064705311614798898324196324010291392262258437263779830715305014361

# running grover.py
grover_7_alternating_bits_oracle = [1, 0, 1, 0, 1, 0, 1]

# running integral.py
bell_integral = 'integrate(exp(-x**2), (x, -oo, oo)) = sqrt(pi)'
bee1_integral = 'integrate(1/(1+x**2), (x, -oo, oo)) = pi'

# running mandelbrot.py
# saving mandelbrot.png

