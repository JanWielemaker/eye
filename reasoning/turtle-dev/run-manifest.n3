PREFIX rdft: <http://www.w3.org/ns/rdftest#>
PREFIX mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
PREFIX string: <http://www.w3.org/2000/10/swap/string#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX re: <http://josd.github.io/eye/reasoning#>

{   ?TEST re:outcome ?OUTCOME.
} <= {
    ?TEST a rdft:TestTurtlePositiveSyntax;
        mf:action ?ACTION.
    ?ACTION log:uri ?ACT.
    ("eye --quiet --nope " ?ACT " 2>&1 | grep ERROR | wc -l > out.txt") string:concatenation ?CMD.
    ("exec" ?CMD 0) e:derive true.
    "out.txt" e:fileString ?OUT.
    (("0" re:PASSED) ("1" re:FAILED)) list:member (?OUT ?OUTCOME).
    ("exec" "rm out.txt" 0) e:derive true.
}.

{   ?TEST re:outcome ?OUTCOME.
} <= {
    ?TEST a rdft:TestTurtleNegativeSyntax;
        mf:action ?ACTION.
    ?ACTION log:uri ?ACT.
    ("eye --quiet --nope " ?ACT " 2>&1 | grep ERROR | wc -l > out.txt") string:concatenation ?CMD.
    ("exec" ?CMD 0) e:derive true.
    "out.txt" e:fileString ?OUT.
    (("1" re:PASSED) ("0" re:FAILED)) list:member (?OUT ?OUTCOME).
    ("exec" "rm out.txt" 0) e:derive true.
}.

{   ?TEST re:outcome ?OUTCOME.
} <= {
    ?TEST a rdft:TestTurtleEval;
        mf:action ?ACTION;
        mf:result ?RESULT.
    ?ACTION log:uri ?ACT.
    ?RESULT log:uri ?RES.
    ("eye --quiet --nope " ?ACT " --entail " ?RES " 2>/dev/null | grep 'true.' | wc -l > out.txt") string:concatenation ?CMD.
    ("exec" ?CMD 0) e:derive true.
    "out.txt" e:fileString ?OUT.
    (("1" re:PASSED) ("0" re:FAILED)) list:member (?OUT ?OUTCOME).
    ("exec" "rm out.txt" 0) e:derive true.
}.

{   ?TEST re:outcome ?OUTCOME.
} <= {
    ?TEST a rdft:TestTurtleNegativeEval;
        mf:action ?ACTION;
        mf:result ?RESULT.
    ?ACTION log:uri ?ACT.
    ?RESULT log:uri ?RES.
    ("eye --quiet --nope " ?ACT " --entail " ?RES " 2>/dev/null | grep 'true.' | wc -l > out.txt") string:concatenation ?CMD.
    ("exec" ?CMD 0) e:derive true.
    "out.txt" e:fileString ?OUT.
    (("1" re:PASSED) ("0" re:FAILED)) list:member (?OUT ?OUTCOME).
    ("exec" "rm out.txt" 0) e:derive true.
}.
