[ :scryer-predicate "exponentiation([-1,0],[0.5,0],[0.00000000000000006123233995736766,1.0])"].
[ :scryer-predicate "exponentiation([e,0],[0,pi],[-1.0,0.00000000000000012246467991473532])"].
[ :scryer-predicate "derivative((x+1)*((x^2+2)*(x^3+3)),x,(x^2+2)*(x^3+3)+(x+1)*(2*x*(x^3+3)+(x^2+2)*(3*x^2)))"].
[ :scryer-predicate "derivative(x/x/x/x/x/x/x/x/x/x,x,(((((((((((((((((x-x)/x^2)*x-x/x)/x^2)*x-x/x/x)/x^2)*x-x/x/x/x)/x^2)*x-x/x/x/x/x)/x^2)*x-x/x/x/x/x/x)/x^2)*x-x/x/x/x/x/x/x)/x^2)*x-x/x/x/x/x/x/x/x)/x^2)*x-x/x/x/x/x/x/x/x/x)/x^2)"].
[ :scryer-predicate "derivative(log(log(log(log(log(log(log(log(log(log(x)))))))))),x,1/x/log(x)/log(log(x))/log(log(log(x)))/log(log(log(log(x))))/log(log(log(log(log(x)))))/log(log(log(log(log(log(x))))))/log(log(log(log(log(log(log(x)))))))/log(log(log(log(log(log(log(log(x))))))))/log(log(log(log(log(log(log(log(log(x))))))))))"].
[ :scryer-predicate "derivative(x*x*x*x*x*x*x*x*x*x,x,((((((((x+x)*x+x*x)*x+x*x*x)*x+x*x*x*x)*x+x*x*x*x*x)*x+x*x*x*x*x*x)*x+x*x*x*x*x*x*x)*x+x*x*x*x*x*x*x*x)*x+x*x*x*x*x*x*x*x*x)"].
[ :scryer-predicate "integral(1*6*x^5,x,x^6)"].
[ :scryer-predicate "integral(((1*sqrt(pi))/2)*exp(- (x^2)),x,erf(x))"].
[ :scryer-predicate "easter(2021,4,4)"].
[ :scryer-predicate "easter(2022,4,17)"].
[ :scryer-predicate "easter(2023,4,9)"].
[ :scryer-predicate "easter(2024,3,31)"].
[ :scryer-predicate "easter(2025,4,20)"].
[ :scryer-predicate "easter(2026,4,5)"].
[ :scryer-predicate "easter(2027,3,28)"].
[ :scryer-predicate "easter(2028,4,16)"].
[ :scryer-predicate "easter(2029,4,1)"].
[ :scryer-predicate "easter(2030,4,21)"].
[ :scryer-predicate "easter(2031,4,13)"].
[ :scryer-predicate "easter(2032,3,28)"].
[ :scryer-predicate "easter(2033,4,17)"].
[ :scryer-predicate "easter(2034,4,9)"].
[ :scryer-predicate "easter(2035,3,25)"].
[ :scryer-predicate "easter(2036,4,13)"].
[ :scryer-predicate "easter(2037,4,5)"].
[ :scryer-predicate "easter(2038,4,25)"].
[ :scryer-predicate "easter(2039,4,10)"].
[ :scryer-predicate "easter(2040,4,1)"].
[ :scryer-predicate "easter(2041,4,21)"].
[ :scryer-predicate "easter(2042,4,6)"].
[ :scryer-predicate "easter(2043,3,29)"].
[ :scryer-predicate "easter(2044,4,17)"].
[ :scryer-predicate "easter(2045,4,9)"].
[ :scryer-predicate "easter(2046,3,25)"].
[ :scryer-predicate "easter(2047,4,14)"].
[ :scryer-predicate "easter(2048,4,5)"].
[ :scryer-predicate "easter(2049,4,18)"].
[ :scryer-predicate "easter(2050,4,11)"].
[ :scryer-predicate "racines([[1,0],[-10,0],[35,0],[-50,0],[24,0]],[[4.000000007450581,0.0],[2.9999999925494194,0.0],[1.9999999925494194,0.0],[1.0000000074505806,0.0]])"].
[ :scryer-predicate "racines([[1,0],[-9,-5],[14,33],[24,-44],[-26,0]],[[3.0000000000000036,2.000000000000001],[5.000000000000005,0.9999999999999927],[-0.000000000000005773159728050814,1.0000000000000027],[0.9999999999999962,1.0000000000000036]])"].
[ :scryer-predicate "solve_equation((x^2-3*x)+2=0,x,x=(- -3+sqrt(1))/(2*1))"].
[ :scryer-predicate "solve_equation((x^2-3*x)+2=0,x,x=(- -3-sqrt(1))/(2*1))"].
[ :scryer-predicate "solve_equation(cos(x)*(1-2*sin(x))=0,x,x=acos(0))"].
[ :scryer-predicate "solve_equation(cos(x)*(1-2*sin(x))=0,x,x= - acos(0))"].
[ :scryer-predicate "solve_equation(cos(x)*(1-2*sin(x))=0,x,x=asin((1-0)/2))"].
[ :scryer-predicate "solve_equation(cos(x)*(1-2*sin(x))=0,x,x=180-asin((1-0)/2))"].
[ :scryer-predicate "solve_equation((2^(2*x)-5*2^(x+1))+16=0,x,x=log((- -10+sqrt(36))/(2*1))/log(2))"].
[ :scryer-predicate "solve_equation((2^(2*x)-5*2^(x+1))+16=0,x,x=log((- -10-sqrt(36))/(2*1))/log(2))"].
[ :scryer-predicate "fft([0,1,2,3,4,5,6,7],[n(64,op(+,49,63)),n(63,op(*,62,52)),n(62,w^7),n(61,op(+,42,60)),n(60,op(*,47,44)),n(59,op(+,31,58)),n(58,op(*,57,38)),n(57,w^5),n(56,op(+,11,55)),n(55,op(*,24,21)),n(54,op(+,49,53)),n(53,op(*,50,52)),n(52,op(+,34,51)),n(51,op(*,47,36)),n(50,w^3),n(49,op(+,26,48)),n(48,op(*,47,29)),n(47,w^6),n(46,op(+,42,45)),n(45,op(*,27,44)),n(44,op(+,15,43)),n(43,op(*,24,19)),n(42,op(+,5,41)),n(41,op(*,24,9)),n(40,op(+,31,39)),n(39,op(*,32,38)),n(38,op(+,34,37)),n(37,op(*,27,36)),n(36,op(+,16,35)),n(35,op(*,24,17)),n(34,op(+,12,33)),n(33,op(*,24,13)),n(32,w^1),n(31,op(+,26,30)),n(30,op(*,27,29)),n(29,op(+,6,28)),n(28,op(*,24,7)),n(27,w^2),n(26,op(+,1,25)),n(25,op(*,24,3)),n(24,w^4),n(23,op(+,11,22)),n(22,op(*,2,21)),n(21,op(+,15,20)),n(20,op(*,2,19)),n(19,op(+,16,18)),n(18,op(*,2,17)),n(17,a(7)),n(16,a(3)),n(15,op(+,12,14)),n(14,op(*,2,13)),n(13,a(5)),n(12,a(1)),n(11,op(+,5,10)),n(10,op(*,2,9)),n(9,op(+,6,8)),n(8,op(*,2,7)),n(7,a(6)),n(6,a(2)),n(5,op(+,1,4)),n(4,op(*,2,3)),n(3,a(4)),n(2,w^0),n(1,a(0))])"].
[ :scryer-predicate "fibonacci(0,1)"].
[ :scryer-predicate "fibonacci(1,1)"].
[ :scryer-predicate "fibonacci(13,377)"].
[ :scryer-predicate "fibonacci(65,27777890035288)"].
[ :scryer-predicate "testgcc([1,1,1,1,1,1,1,1,1],s(0,0,0),[s(0,0,1),s(0,1,1),s(0,1,0),s(1,1,0),s(1,1,1),s(1,0,1),s(1,0,0),s(0,0,0),s(0,0,1)])"].
[ :scryer-predicate "route([1,1],[9,8],[[[2,3],[4,5]],[[6,6],[8,8]]],[[1,1],[1,2],[2,2],[3,2],[4,2],[5,2],[5,3],[5,4],[5,5],[6,5],[7,5],[8,5],[9,5],[9,6],[9,7],[9,8]])"].
[ :scryer-predicate "pi(100000,3.141592653589792)"].
[ :scryer-predicate "area([[3,2],[6,2],[7,6],[4,6],[5,5],[5,3],[3,2]],7.5)"].
[ :scryer-predicate "prime(2)"].
[ :scryer-predicate "prime(3)"].
[ :scryer-predicate "prime(5)"].
[ :scryer-predicate "prime(7)"].
[ :scryer-predicate "prime(11)"].
[ :scryer-predicate "prime(13)"].
[ :scryer-predicate "prime(17)"].
[ :scryer-predicate "prime(19)"].
[ :scryer-predicate "prime(23)"].
[ :scryer-predicate "prime(29)"].
[ :scryer-predicate "prime(31)"].
[ :scryer-predicate "prime(37)"].
[ :scryer-predicate "prime(41)"].
[ :scryer-predicate "prime(43)"].
[ :scryer-predicate "prime(47)"].
[ :scryer-predicate "prime(53)"].
[ :scryer-predicate "prime(59)"].
[ :scryer-predicate "prime(61)"].
[ :scryer-predicate "prime(67)"].
[ :scryer-predicate "prime(71)"].
[ :scryer-predicate "prime(73)"].
[ :scryer-predicate "prime(79)"].
[ :scryer-predicate "prime(83)"].
[ :scryer-predicate "prime(89)"].
[ :scryer-predicate "prime(97)"].
[ :scryer-predicate "prime(1009)"].
[ :scryer-predicate "prime(1013)"].
[ :scryer-predicate "prime(1019)"].
[ :scryer-predicate "prime(1021)"].
[ :scryer-predicate "prime(1031)"].
[ :scryer-predicate "prime(1033)"].
[ :scryer-predicate "prime(1039)"].
[ :scryer-predicate "prime(1049)"].
[ :scryer-predicate "prime(1051)"].
[ :scryer-predicate "prime(1061)"].
[ :scryer-predicate "prime(1063)"].
[ :scryer-predicate "prime(1069)"].
[ :scryer-predicate "prime(1087)"].
[ :scryer-predicate "prime(1091)"].
[ :scryer-predicate "prime(1093)"].
[ :scryer-predicate "prime(1097)"].
[ :scryer-predicate "prime(1000003)"].
[ :scryer-predicate "prime(1000033)"].
[ :scryer-predicate "prime(1000037)"].
[ :scryer-predicate "prime(1000039)"].
[ :scryer-predicate "prime(1000081)"].
[ :scryer-predicate "prime(1000099)"].
[ :scryer-predicate "tak(34,13,8,13)"].
[ :scryer-predicate "totient(271828182845904,87459116512768)"].
[ :scryer-predicate "compute([1,0,1,0,0,1],[1,0,1,0,1,0,#])"].
[ :scryer-predicate "compute([1,0,1,1,1,1],[1,1,0,0,0,0,#])"].
[ :scryer-predicate "compute([1,1,1,1,1,1],[1,0,0,0,0,0,0,#])"].
[ :scryer-predicate "compute([],[1,#])"].
