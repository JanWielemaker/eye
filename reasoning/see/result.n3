PREFIX : <http://josd.github.io/eye/reasoning#>

[] :expression ":(sqrt(2))"; :evaluation "1.414213562373095".
[] :expression ":(sqrt(81))"; :evaluation "9.0".
[] :expression ":(sqrt(62232491515607091882574410635924603070626544377175485625797))"; :evaluation "6.0773917495710050666576572886645120186158734743335435522775390625e+55".

[] :expression ":(sqrt(-1 + 0im))"; :evaluation "0.0 + 1.0im".
[] :expression ":(exp(Ï€ * im) + 1)"; :evaluation "0.0 + 1.2246467991473532e-16im".
[] :expression ":(sin(im))"; :evaluation "0.0 + 1.1752011936438014im".

[] :expression ":(fibonacci(0))"; :evaluation "0".
[] :expression ":(fibonacci(1))"; :evaluation "1".
[] :expression ":(fibonacci(6))"; :evaluation "8".
[] :expression ":(fibonacci(91))"; :evaluation "4660046610375530309".
[] :expression ":(fibonacci(big(283)))"; :evaluation "62232491515607091882574410635924603070626544377175485625797".
[] :expression ":(fibonacci(big(3674)))"; :evaluation "295872959797101479478634366815157108100573212705250690577871041398423606408217262643449728342664061812585639168722421830407677671667740585806703531229882783069925750619720511808616484846128237251921414441458265138672827487722512845223115526738192067144721087756159352711138340620702266509343657403678256247195010013499661223527119909308682062873140767135468966093474944529418214755911968500799987099146489838560114063096775586903976827512299123202488315139397181279903459556726060805948910609527571241968534269554079076649680403030083743420820438603816095671532163428933363322524736324029745871445486444623006627119156710782085648303485296149604974010598940800770684835758031137479033374229914629583184427269638360355586190323578625395157899987377625662075558684705457".

[] :expression ":(hanoi(4, 1, 2, 3))"; :evaluation "true".
[] :expression ":(hanoi(24, 1, 2, 3))"; :evaluation "true".

[] :expression ":(inv([1 2 3; 4 1 6; 7 8 1]))"; :evaluation "[-0.4519230769230769 0.2115384615384615 0.08653846153846156; 0.3653846153846154 -0.1923076923076923 0.057692307692307675; 0.24038461538461536 0.057692307692307696 -0.0673076923076923]".
[] :expression ":(det([1 2 3; 4 1 6; 7 8 1]))"; :evaluation "104.0".
[] :expression ":(eigvals([-4.0 -17.0; 2.0 2.0]))"; :evaluation "ComplexF64[-1.0 - 5.0im, -1.0 + 5.0im]".
[] :expression ":(eigvecs([-4.0 -17.0; 2.0 2.0]))"; :evaluation "ComplexF64[0.9459053029269173 - 0.0im 0.9459053029269173 + 0.0im; -0.16692446522239718 + 0.2782074420373286im -0.16692446522239718 - 0.2782074420373286im]".
[] :expression ":(factorize([1.5 2 -4; 3 -1 -6; -10 2.3 4]))"; :evaluation "LU{Float64, Matrix{Float64}}([-10.0 2.3 4.0; -0.15000000000000002 2.345 -3.4; -0.30000000000000004 -0.1321961620469083 -5.249466950959488], [3, 3, 3], 0)".
[] :expression ":(factorize([1.5 2 -4; 2 -1 -3; -4 -3 5]))"; :evaluation "BunchKaufman{Float64, Matrix{Float64}}([-1.642857142857143 0.14285714285714296 -0.8; 2.0 -2.8000000000000003 -0.6000000000000001; -4.0 -3.0 5.0], [1, 2, 3], 'U', true, false, 0)".
[] :expression ":([1 0; 1 -2] \\ [32; -4])"; :evaluation "[32.0, 18.0]".
[] :expression ":([1 0; 1 -2] * [32.0, 18.0])"; :evaluation "[32.0, -4.0]".
[] :expression ":(dot([1; 1], [2; 3]))"; :evaluation "5".
[] :expression ":(cross([0; 1; 0], [0; 0; 1]))"; :evaluation "[1, 0, 0]".
[] :expression ":(UpperHessenberg([1 2 3 4; 5 6 7 8; 9 10 11 12; 13 14 15 16]))"; :evaluation "[1 2 3 4; 5 6 7 8; 0 10 11 12; 0 0 15 16]".
[] :expression ":((cholesky([4.0 12.0 -16.0; 12.0 37.0 -43.0; -16.0 -43.0 98.0])).U)"; :evaluation "[2.0 6.0 -8.0; 0.0 1.0 5.0; 0.0 0.0 3.0]".
[] :expression ":((cholesky([4.0 12.0 -16.0; 12.0 37.0 -43.0; -16.0 -43.0 98.0])).L)"; :evaluation "[2.0 0.0 0.0; 6.0 1.0 0.0; -8.0 5.0 3.0]".

[] :expression ":(roots(Polynomial([24 + 7im, -50, 35, -10, 1])))"; :evaluation "ComplexF64[0.6352976779615936 + 0.4671733246057253im, 1.7445177980581146 - 1.1530902792250135im, 3.255482201941887 + 1.1530902792250155im, 4.364702322038397 - 0.46717332460572614im]".
[] :expression ":(roots(Polynomial([-26, 24 - 44im, 14 + 33im, -9 - 5im, 1])))"; :evaluation "ComplexF64[2.3877599888475267e-16 + 0.9999999999999999im, 0.9999999999999997 + 0.9999999999999997im, 2.999999999999999 + 1.9999999999999998im, 5.0 + 0.9999999999999991im]".

[] :expression ":(primes(0, 100))"; :evaluation "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]".
[] :expression ":(primes(1000000, 1000100))"; :evaluation "[1000003, 1000033, 1000037, 1000039, 1000081, 1000099]".
[] :expression ":(isprime(6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151))"; :evaluation "true".
[] :expression ":(nextprime(6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151))"; :evaluation "6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151".
[] :expression ":(totient(271))"; :evaluation "270".
[] :expression ":(totient(2718281))"; :evaluation "2718280".
[] :expression ":(totient(27182818284))"; :evaluation "8994800640".
[] :expression ":(totient(271828182845904))"; :evaluation "87459116512768".

