# running color.pl
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c3],[p3,c2],[p4,c1],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c4],[p3,c2],[p4,c1],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c2],[p3,c3],[p4,c1],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c4],[p3,c3],[p4,c1],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c2],[p3,c4],[p4,c1],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c3],[p3,c4],[p4,c1],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c1],[p3,c3],[p4,c2],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c1],[p3,c4],[p4,c2],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c1],[p3,c2],[p4,c3],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c1],[p3,c4],[p4,c3],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c1],[p3,c2],[p4,c4],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c1],[p3,c3],[p4,c4],[p5,c1]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c2],[p3,c3],[p4,c1],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c2],[p3,c4],[p4,c1],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c3],[p3,c1],[p4,c2],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c4],[p3,c1],[p4,c2],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c1],[p3,c3],[p4,c2],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c4],[p3,c3],[p4,c2],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c1],[p3,c4],[p4,c2],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c3],[p3,c4],[p4,c2],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c2],[p3,c1],[p4,c3],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c2],[p3,c4],[p4,c3],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c2],[p3,c1],[p4,c4],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c2],[p3,c3],[p4,c4],[p5,c2]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c3],[p3,c2],[p4,c1],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c3],[p3,c4],[p4,c1],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c3],[p3,c1],[p4,c2],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c3],[p3,c4],[p4,c2],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c2],[p3,c1],[p4,c3],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c4],[p3,c1],[p4,c3],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c4],[p2,c1],[p3,c2],[p4,c3],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c4],[p3,c2],[p4,c3],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c1],[p3,c4],[p4,c3],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c2],[p3,c4],[p4,c3],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c3],[p3,c1],[p4,c4],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c3],[p3,c2],[p4,c4],[p5,c3]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c4],[p3,c2],[p4,c1],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c4],[p3,c3],[p4,c1],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c4],[p3,c1],[p4,c2],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c4],[p3,c3],[p4,c2],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c4],[p3,c1],[p4,c3],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c4],[p3,c2],[p4,c3],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c2],[p3,c1],[p4,c4],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c3],[p3,c1],[p4,c4],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c3],[p2,c1],[p3,c2],[p4,c4],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c3],[p3,c2],[p4,c4],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c2],[p2,c1],[p3,c3],[p4,c4],[p5,c4]])""".
[] :prolog-answer """colors(map1,[[p1,c1],[p2,c2],[p3,c3],[p4,c4],[p5,c4]])""".

# running complex.pl
[] :prolog-answer """exp([[-1,0],[0.5,0]],[6.123233995736766e-17,1.0])""".
[] :prolog-answer """exp([[e,0],[0,pi]],[-1.0,1.2246467991473532e-16])""".
[] :prolog-answer """log([[e,0],[-1,0]],[0.0,3.141592653589793])""".
[] :prolog-answer """log([[0,1],[0,1]],[1.0,0.0])""".
[] :prolog-answer """sin([1.570796326794897,1.316957896924817],[2.0000000000000004,-6.631275506809351e-16])""".
[] :prolog-answer """cos([0,-1.316957896924817],[2.0000000000000004,0.0])""".
[] :prolog-answer """tan([1.338972522294493,0.4023594781085251],[1.000000000000001,1.9999999999999982])""".
[] :prolog-answer """asin([2,0],[1.5707963267948966,1.3169578969248166])""".
[] :prolog-answer """acos([2,0],[0.0,-1.3169578969248166])""".
[] :prolog-answer """atan([1,2],[1.3389725222944935,0.4023594781085251])""".

# running de.pl
[] :prolog-answer """saying(someone,"C")""".

# running diamond.pl
[] :prolog-answer """re(b,B),re(c,B)""".

# running dt.pl
[] :prolog-answer """n1(z)""".
[] :prolog-answer """n10(z)""".
[] :prolog-answer """n100(z)""".
[] :prolog-answer """n1000(z)""".
[] :prolog-answer """n10000(z)""".

# running easter.pl
[] :prolog-answer """easter(2021,[4,4])""".
[] :prolog-answer """easter(2022,[4,17])""".
[] :prolog-answer """easter(2023,[4,9])""".
[] :prolog-answer """easter(2024,[3,31])""".
[] :prolog-answer """easter(2025,[4,20])""".
[] :prolog-answer """easter(2026,[4,5])""".
[] :prolog-answer """easter(2027,[3,28])""".
[] :prolog-answer """easter(2028,[4,16])""".
[] :prolog-answer """easter(2029,[4,1])""".
[] :prolog-answer """easter(2030,[4,21])""".
[] :prolog-answer """easter(2031,[4,13])""".
[] :prolog-answer """easter(2032,[3,28])""".
[] :prolog-answer """easter(2033,[4,17])""".
[] :prolog-answer """easter(2034,[4,9])""".
[] :prolog-answer """easter(2035,[3,25])""".
[] :prolog-answer """easter(2036,[4,13])""".
[] :prolog-answer """easter(2037,[4,5])""".
[] :prolog-answer """easter(2038,[4,25])""".
[] :prolog-answer """easter(2039,[4,10])""".
[] :prolog-answer """easter(2040,[4,1])""".
[] :prolog-answer """easter(2041,[4,21])""".
[] :prolog-answer """easter(2042,[4,6])""".
[] :prolog-answer """easter(2043,[3,29])""".
[] :prolog-answer """easter(2044,[4,17])""".
[] :prolog-answer """easter(2045,[4,9])""".
[] :prolog-answer """easter(2046,[3,25])""".
[] :prolog-answer """easter(2047,[4,14])""".
[] :prolog-answer """easter(2048,[4,5])""".
[] :prolog-answer """easter(2049,[4,18])""".
[] :prolog-answer """easter(2050,[4,10])""".

# running fft.pl
[] :prolog-answer """fft([0,1,2,3,4,5,6,7],[n(64,op(+,49,63)),n(63,op(*,62,52)),n(62,w^7),n(61,op(+,42,60)),n(60,op(*,47,44)),n(59,op(+,31,58)),n(58,op(*,57,38)),n(57,w^5),n(56,op(+,11,55)),n(55,op(*,24,21)),n(54,op(+,49,53)),n(53,op(*,50,52)),n(52,op(+,34,51)),n(51,op(*,47,36)),n(50,w^3),n(49,op(+,26,48)),n(48,op(*,47,29)),n(47,w^6),n(46,op(+,42,45)),n(45,op(*,27,44)),n(44,op(+,15,43)),n(43,op(*,24,19)),n(42,op(+,5,41)),n(41,op(*,24,9)),n(40,op(+,31,39)),n(39,op(*,32,38)),n(38,op(+,34,37)),n(37,op(*,27,36)),n(36,op(+,16,35)),n(35,op(*,24,17)),n(34,op(+,12,33)),n(33,op(*,24,13)),n(32,w^1),n(31,op(+,26,30)),n(30,op(*,27,29)),n(29,op(+,6,28)),n(28,op(*,24,7)),n(27,w^2),n(26,op(+,1,25)),n(25,op(*,24,3)),n(24,w^4),n(23,op(+,11,22)),n(22,op(*,2,21)),n(21,op(+,15,20)),n(20,op(*,2,19)),n(19,op(+,16,18)),n(18,op(*,2,17)),n(17,a(7)),n(16,a(3)),n(15,op(+,12,14)),n(14,op(*,2,13)),n(13,a(5)),n(12,a(1)),n(11,op(+,5,10)),n(10,op(*,2,9)),n(9,op(+,6,8)),n(8,op(*,2,7)),n(7,a(6)),n(6,a(2)),n(5,op(+,1,4)),n(4,op(*,2,3)),n(3,a(4)),n(2,w^0),n(1,a(0))])""".

# running fibonacci.pl
[] :prolog-answer """fibonacci(1,1)""".
[] :prolog-answer """fibonacci(2,1)""".
[] :prolog-answer """fibonacci(3,2)""".
[] :prolog-answer """fibonacci(4,3)""".
[] :prolog-answer """fibonacci(5,5)""".
[] :prolog-answer """fibonacci(6,8)""".
[] :prolog-answer """fibonacci(7,13)""".
[] :prolog-answer """fibonacci(8,21)""".
[] :prolog-answer """fibonacci(9,34)""".
[] :prolog-answer """fibonacci(10,55)""".
[] :prolog-answer """fibonacci(11,89)""".
[] :prolog-answer """fibonacci(12,144)""".
[] :prolog-answer """fibonacci(13,233)""".
[] :prolog-answer """fibonacci(14,377)""".
[] :prolog-answer """fibonacci(15,610)""".
[] :prolog-answer """fibonacci(16,987)""".
[] :prolog-answer """fibonacci(17,1597)""".
[] :prolog-answer """fibonacci(18,2584)""".
[] :prolog-answer """fibonacci(19,4181)""".
[] :prolog-answer """fibonacci(20,6765)""".
[] :prolog-answer """fibonacci(91,4660046610375530309)""".
[] :prolog-answer """fibonacci(283,62232491515607091882574410635924603070626544377175485625797)""".
[] :prolog-answer """fibonacci(3674,295872959797101479478634366815157108100573212705250690577871041398423606408217262643449728342664061812585639168722421830407677671667740585806703531229882783069925750619720511808616484846128237251921414441458265138672827487722512845223115526738192067144721087756159352711138340620702266509343657403678256247195010013499661223527119909308682062873140767135468966093474944529418214755911968500799987099146489838560114063096775586903976827512299123202488315139397181279903459556726060805948910609527571241968534269554079076649680403030083743420820438603816095671532163428933363322524736324029745871445486444623006627119156710782085648303485296149604974010598940800770684835758031137479033374229914629583184427269638360355586190323578625395157899987377625662075558684705457)""".
[] :prolog-answer """golden_ratio(1,1)""".
[] :prolog-answer """golden_ratio(10,1.6181818181818182)""".
[] :prolog-answer """golden_ratio(100,1.6180339887498951)""".
[] :prolog-answer """golden_ratio(1000,1.618033988749895)""".

# running gcc.pl
[] :prolog-answer """gcc([[1,1,1,1,1,1,1,1,1],[0,0,0]],[[0,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,1],[1,0,1],[1,0,0],[0,0,0],[0,0,1]])""".

# running glass.pl
[] :prolog-answer """q([[A,b,c]],o)""".
[] :prolog-answer """q([[a,B,C],[a,B,C]],o)""".
[] :prolog-answer """q([[a,D,E],[F,D,E]],o)""".
[] :prolog-answer """q([[r,G,t]],o)""".
[] :prolog-answer """q([[d,e,f],[r,H,t]],o)""".
[] :prolog-answer """q([[d,I,f],[r,s,t]],o)""".
[] :prolog-answer """q([[d,e,f],[r,s,t],[d,J,f]],o)""".
[] :prolog-answer """q([[d,K,f],[r,L,t],[d,e,f]],o)""".

# running gps.pl
[] :prolog-answer """findpath(map_be,[location(i1,oostende),[drive_gent_brugge,drive_brugge_oostende],2400.0,0.01,0.9408,0.99,[5000.0,5.0,0.2,0.4,1]])""".
[] :prolog-answer """findpath(map_be,[location(i1,oostende),[drive_gent_kortrijk,drive_kortrijk_brugge,drive_brugge_oostende],4100.0,0.018000000000000002,0.903168,0.9801,[5000.0,5.0,0.2,0.4,1]])""".

# running graph.pl
[] :prolog-answer """path(angers,nantes)""".
[] :prolog-answer """path(lemans,nantes)""".
[] :prolog-answer """path(chartres,nantes)""".
[] :prolog-answer """path(paris,nantes)""".

# running hanoi.pl
[] :prolog-answer """move(14,[left,centre,right])""".

# running lee.pl
[] :prolog-answer """route([[1,1],[9,8],[[[2,3],[4,5]],[[6,6],[8,8]]]],[[9,8],[9,7],[9,6],[9,5],[8,5],[7,5],[6,5],[5,5],[5,4],[5,3],[5,2],[4,2],[3,2],[2,2],[1,2],[1,1]])""".

# running matrix.pl
[] :prolog-answer """determinant([[2,-1,0],[-1,2,-1],[0,-1,2]],3.999999999999999)""".
[] :prolog-answer """matrix_inversion([[2,-1,0],[-1,2,-1],[0,-1,2]],[[0.7499999999999999,0.5000000000000001,0.2500000000000001],[0.5000000000000001,1.0000000000000004,0.5000000000000002],[0.2500000000000001,0.5000000000000002,0.7500000000000001]])""".
[] :prolog-answer """matrix_inversion([[18,22,54,42],[22,70,86,62],[54,86,174,134],[42,62,134,106]],[[2.515624999999984,0.48437499999999334,-1.2968749999999734,0.3593749999999767],[0.48437499999999334,0.14062499999999778,-0.32812499999999184,0.14062499999999356],[-1.2968749999999734,-0.32812499999999184,1.0156249999999707,-0.5781249999999781],[0.3593749999999767,0.14062499999999356,-0.5781249999999781,0.5156249999999853]])""".
[] :prolog-answer """matrix_inv_triang([[2,0,0],[-1,2,0],[0,-1,2]],[[0.5,0.0,0.0],[0.25,0.5,0.0],[0.125,0.25,0.5]])""".
[] :prolog-answer """matrix_multiply([[[1,2],[3,4],[5,6]],[[1,1,1],[1,1,1]]],[[3,3,3],[7,7,7],[11,11,11]])""".
[] :prolog-answer """matrix_multiply([[[18,22,54,42],[22,70,86,62],[54,86,174,134],[42,62,134,106]],[[2.515624999999984,0.4843749999999933,-1.296874999999973,0.3593749999999767],[0.4843749999999933,0.1406249999999978,-0.3281249999999918,0.1406249999999936],[-1.296874999999973,-0.3281249999999918,1.015624999999971,-0.5781249999999781],[0.3593749999999767,0.1406249999999936,-0.5781249999999781,0.5156249999999853]]],[[1.0000000000000515,6.217248937900877e-15,1.7763568394002505e-14,3.552713678800501e-15],[6.039613253960852e-14,1.0000000000000107,2.842170943040401e-14,1.0658141036401503e-14],[1.7053025658242404e-13,1.4210854715202004e-14,1.0000000000000426,4.263256414560601e-14],[8.526512829121202e-14,1.7763568394002505e-15,7.105427357601002e-14,0.9999999999999929]])""".
[] :prolog-answer """matrix_sum([[[1,2],[3,4],[5,6]],[[1,2],[3,4],[5,6]]],[[2,4],[6,8],[10,12]])""".
[] :prolog-answer """cholesky_decomposition([[25,15,-5],[15,18,0],[-5,0,11]],[[5.0,0,0],[3.0,3.0,0],[-1.0,1.0,3.0]])""".
[] :prolog-answer """cholesky_decomposition([[18,22,54,42],[22,70,86,62],[54,86,174,134],[42,62,134,106]],[[4.242640687119285,0,0,0],[5.185449728701349,6.565905201197403,0,0],[12.727922061357857,3.0460384954008553,1.6497422479090704,0],[9.899494936611667,1.624553864213788,1.8497110052313648,1.3926212476456026]])""".

# running mi.pl
[] :prolog-answer """mi(natnum(0),prolog)""".
[] :prolog-answer """mi(natnum(s(0)),prolog)""".
[] :prolog-answer """mi(natnum(s(s(0))),prolog)""".
[] :prolog-answer """mi(natnum(s(s(s(0)))),prolog)""".
[] :prolog-answer """mi(natnum(s(s(s(s(0))))),prolog)""".
[] :prolog-answer """mi(natnum(s(s(s(s(s(0)))))),prolog)""".
[] :prolog-answer """mi(natnum(s(s(s(s(s(s(0))))))),prolog)""".
[] :prolog-answer """mi(natnum(s(s(s(s(s(s(s(0)))))))),prolog)""".
[] :prolog-answer """mi(natnum(s(s(s(s(s(s(s(s(0))))))))),prolog)""".
[] :prolog-answer """mi(natnum(s(s(s(s(s(s(s(s(s(0)))))))))),prolog)""".

# running padovan.pl
[] :prolog-answer """padovan(1,1)""".
[] :prolog-answer """padovan(2,1)""".
[] :prolog-answer """padovan(3,1)""".
[] :prolog-answer """padovan(4,2)""".
[] :prolog-answer """padovan(5,2)""".
[] :prolog-answer """padovan(6,3)""".
[] :prolog-answer """padovan(7,4)""".
[] :prolog-answer """padovan(8,5)""".
[] :prolog-answer """padovan(9,7)""".
[] :prolog-answer """padovan(10,9)""".
[] :prolog-answer """padovan(11,12)""".
[] :prolog-answer """padovan(12,16)""".
[] :prolog-answer """padovan(13,21)""".
[] :prolog-answer """padovan(14,28)""".
[] :prolog-answer """padovan(15,37)""".
[] :prolog-answer """padovan(16,49)""".
[] :prolog-answer """padovan(17,65)""".
[] :prolog-answer """padovan(18,86)""".
[] :prolog-answer """padovan(19,114)""".
[] :prolog-answer """padovan(20,151)""".
[] :prolog-answer """padovan(91,70748973084)""".
[] :prolog-answer """padovan(283,19834325738278984504790864536272129)""".
[] :prolog-answer """padovan(3674,26178594930998300129122144750852069608549403205774929555079079707081575465552356148508452550483580612948221886219497991654772054359076809450166551553886580037212540081075958680409828886869538010195558848488217299128261230125392693494793565831379519817637833179199806547822062027975157112247040373170650000852653450124493609094492793737517355809497791251385318177510845806782564433990788816833563231575956567960805822051433568191271295650424612344171)""".
[] :prolog-answer """plastic_ratio(1,1)""".
[] :prolog-answer """plastic_ratio(10,1.3333333333333333)""".
[] :prolog-answer """plastic_ratio(100,1.324717957244746)""".
[] :prolog-answer """plastic_ratio(1000,1.324717957244746)""".

# running pi.pl
[] :prolog-answer """pi(100000,3.141592653589792)""".

# running polygon.pl
[] :prolog-answer """area([[3,2],[6,2],[7,6],[4,6],[5,5],[5,3],[3,2]],7.5)""".

# running polynomial.pl
[] :prolog-answer """roots([[1,0],[-10,0],[35,0],[-50,0],[24,0]],[[4.000000007450581,0.0],[2.9999999925494194,0.0],[1.9999999925494194,0.0],[1.0000000074505806,0.0]])""".
[] :prolog-answer """roots([[1,0],[-9,-5],[14,33],[24,-44],[-26,0]],[[3.0000000000000036,2.000000000000001],[5.000000000000005,0.9999999999999927],[-5.773159728050814e-15,1.0000000000000027],[0.9999999999999962,1.0000000000000036]])""".

# running prime.pl
[] :prolog-answer """primerange([0,100],[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])""".
[] :prolog-answer """primerange([1000000,1000100],[1000003,1000033,1000037,1000039,1000081,1000099])""".
[] :prolog-answer """totient(271,270)""".
[] :prolog-answer """totient(2718281,2718280)""".
[] :prolog-answer """totient(27182818284,8994800640)""".
[] :prolog-answer """totient(271828182845904,87459116512768)""".

# running sdcoding.pl
[] :prolog-answer """sdcoding(1,1)""".
[] :prolog-answer """sdcoding(3,3)""".
[] :prolog-answer """sdcoding(0,0)""".
[] :prolog-answer """sdcoding(2,2)""".

# running skolem.pl
[] :prolog-answer """likes(peter,skolem(peter))""".
[] :prolog-answer """likes(bob,skolem(bob))""".

# running socrates.pl
[] :prolog-answer """mortal(socrates)""".

# running sudoku.pl
[] :prolog-answer """sudoku([8,A,B,4,C,5,D,E,F,6,G,4,H,I,J,K,L,1,M,N,O,P,1,Q,R,S,2,T,3,7,2,U,V,W,X,Y,Z,A1,B1,C1,5,1,D1,E1,9,F1,G1,H1,I1,J1,4,K1,3,L1,9,M1,2,N1,O1,8,1,P1,7,7,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,1,A2,B2,2,C2,D2,E2],[8,1,3,4,2,5,7,9,6,6,2,4,8,9,7,3,5,1,5,7,9,6,1,3,8,4,2,4,3,7,2,8,9,6,1,5,2,8,6,3,5,1,4,7,9,1,9,5,7,6,4,2,3,8,9,4,2,5,3,8,1,6,7,7,5,8,1,4,6,9,2,3,3,6,1,9,7,2,5,8,4])""".

# running tak.pl
[] :prolog-answer """tak([34,13,8],13)""".

# running turing.pl
[] :prolog-answer """compute([1,0,1,0,0,1],[1,0,1,0,1,0,"#"])""".
[] :prolog-answer """compute([1,0,1,1,1,1],[1,1,0,0,0,0,"#"])""".
[] :prolog-answer """compute([1,1,1,1,1,1],[1,0,0,0,0,0,0,"#"])""".
[] :prolog-answer """compute([],[1,"#"])""".

