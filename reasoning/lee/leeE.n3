PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX : <http://josd.github.io/eye/reasoning#>
PREFIX r: <http://www.w3.org/2000/10/swap/reason#>

[] a r:Proof, r:Conjunction;
  r:component <#lemma1>;
  r:gives {
    ((1 1) (9 8) (((2 3) (4 5)) ((6 6) (8 8)))) :route ((1 1) (1 2) (2 2) (3 2) (4 2) (5 2) (5 3) (5 4) (5 5) (6 5) (7 5) (8 5) (9 5) (9 6) (9 7) (9 8)).
  }.

<#lemma1> a r:Inference;
  r:gives {
    ((1 1) (9 8) (((2 3) (4 5)) ((6 6) (8 8)))) :route ((1 1) (1 2) (2 2) (3 2) (4 2) (5 2) (5 3) (5 4) (5 5) (6 5) (7 5) (8 5) (9 5) (9 6) (9 7) (9 8)).
  };
  r:evidence (
    <#lemma2>
  );
  r:rule <#lemma3>.

<#lemma2> a r:Inference;
  r:gives {
    ((1 1) (9 8) (((2 3) (4 5)) ((6 6) (8 8)))) :route ((1 1) (1 2) (2 2) (3 2) (4 2) (5 2) (5 3) (5 4) (5 5) (6 5) (7 5) (8 5) (9 5) (9 6) (9 7) (9 8)).
  };
  r:evidence (
    <#lemma4>
    <#lemma5>
    [ a r:Fact; r:gives {((9 8) (9 7) (9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:reverse ((1 1) (1 2) (2 2) (3 2) (4 2) (5 2) (5 3) (5 4) (5 5) (6 5) (7 5) (8 5) (9 5) (9 6) (9 7) (9 8))}]
  );
  r:rule <#lemma6>.

<#lemma3> a r:Extraction;
  r:gives {
    {((1 1) (9 8) (((2 3) (4 5)) ((6 6) (8 8)))) :route ?x_0_1} => {((1 1) (9 8) (((2 3) (4 5)) ((6 6) (8 8)))) :route ?x_0_1}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/leeQ.n3>].

<#lemma4> a r:Inference;
  r:gives {
    ((9 8) (((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((1 1)) ()) e:firstRest (((1 1)) (()))}]
    [ a r:Fact; r:gives {(()) e:firstRest (() ())}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((1 1)) ()) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 1) (1 0) (1 2) (2 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 1) (1 0) (1 2) (2 1)) (((1 1)) ()))}]
    <#lemma7>
  );
  r:rule <#lemma8>.

<#lemma5> a r:Inference;
  r:gives {
    ((1 1) (9 8) (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((9 8) (9 7) (9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((9 8) (9 7) (9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((9 8) ((9 7) (9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) list:member (9 7)}]
    <#lemma9>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma10>
  );
  r:rule <#lemma11>.

<#lemma6> a r:Extraction;
  r:gives {
    {(?x_1_2 ?x_0_2 ?x_2_2) :route ?x_5_2} <= {(?x_0_2 ((?x_1_2) ()) ?x_2_2) :waves ?x_3_2.
     (?x_1_2 ?x_0_2 ?x_3_2) :path ?x_4_2.
     ?x_4_2 e:reverse ?x_5_2}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

<#lemma7> a r:Inference;
  r:gives {
    ((9 8) (((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 1) (1 0) (1 2) (2 1)) (((1 1)) ()))}]
    [ a r:Fact; r:gives {(((1 1)) ()) e:firstRest (((1 1)) (()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 1) (1 0) (1 2) (2 1)) ((1 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) (((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma12>
  );
  r:rule <#lemma8>.

<#lemma8> a r:Extraction;
  r:gives {
    {(?x_9_3 ?x_0_3 ?x_6_3) :waves ?x_10_3} <= {?x_0_3 e:firstRest (?x_1_3 ?x_2_3).
     ?x_2_3 e:firstRest (?x_3_3 ?x_4_3).
     ("setof" ?x_5_3 {(?x_5_3 ?x_1_3 ?x_3_3) :admissible ?x_6_3} ?x_7_3) e:derive true.
     ?x_8_3 e:firstRest (?x_7_3 ?x_0_3).
     (?x_9_3 ?x_8_3 ?x_6_3) :waves ?x_10_3}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

<#lemma9> a r:Inference;
  r:gives {
    (9 8) :neighbor (9 7).
  };
  r:evidence (
    <#lemma13>
  );
  r:rule <#lemma14>.

<#lemma10> a r:Inference;
  r:gives {
    ((1 1) (9 7) (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((9 7) (9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((9 7) (9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((9 7) ((9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) list:member (9 6)}]
    <#lemma15>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma16>
  );
  r:rule <#lemma11>.

<#lemma11> a r:Extraction;
  r:gives {
    {(?x_7_4 ?x_4_4 ?x_0_4) :path ?x_3_4} <= {?x_0_4 e:firstRest (?x_1_4 ?x_2_4).
     ?x_3_4 e:firstRest (?x_4_4 ?x_5_4).
     ?x_1_4 list:member ?x_6_4.
     ?x_4_4 :neighbor ?x_6_4.
     ("!") e:derive true.
     (?x_7_4 ?x_6_4 ?x_2_4) :path ?x_5_4}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

<#lemma12> a r:Inference;
  r:gives {
    ((9 8) (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) (((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 1) (1 0) (1 2) (2 1)) (((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 3) (1 4) (3 0) (3 2) (4 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 3) (1 4) (3 0) (3 2) (4 1)) (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma17>
  );
  r:rule <#lemma8>.

<#lemma13> a r:Inference;
  r:gives {
    8 :next_to 7 .
  };
  r:evidence (
    [ a r:Fact; r:gives {8 math:greaterThan 0}]
    [ a r:Fact; r:gives {(8 -1) math:sum 7}]
  );
  r:rule <#lemma18>.

<#lemma14> a r:Extraction;
  r:gives {
    {(?x_2_5 ?x_0_5) :neighbor (?x_2_5 ?x_1_5)} <= {?x_0_5 :next_to ?x_1_5}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

<#lemma15> a r:Inference;
  r:gives {
    (9 7) :neighbor (9 6).
  };
  r:evidence (
    <#lemma19>
  );
  r:rule <#lemma14>.

<#lemma16> a r:Inference;
  r:gives {
    ((1 1) (9 6) (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((9 6) (9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((9 6) ((9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) list:member (9 5)}]
    <#lemma20>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma21>
  );
  r:rule <#lemma11>.

<#lemma17> a r:Inference;
  r:gives {
    ((9 8) (((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 3) (1 4) (3 0) (3 2) (4 1)) (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) (((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 4) (1 5) (4 0) (4 2) (5 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 4) (1 5) (4 0) (4 2) (5 1)) (((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma22>
  );
  r:rule <#lemma8>.

<#lemma18> a r:Extraction;
  r:gives {
    {?x_0_6 :next_to ?x_1_6} <= {?x_0_6 math:greaterThan 0 .
     (?x_0_6 -1) math:sum ?x_1_6}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

<#lemma19> a r:Inference;
  r:gives {
    7 :next_to 6 .
  };
  r:evidence (
    [ a r:Fact; r:gives {7 math:greaterThan 0}]
    [ a r:Fact; r:gives {(7 -1) math:sum 6}]
  );
  r:rule <#lemma18>.

<#lemma20> a r:Inference;
  r:gives {
    (9 6) :neighbor (9 5).
  };
  r:evidence (
    <#lemma23>
  );
  r:rule <#lemma14>.

<#lemma21> a r:Inference;
  r:gives {
    ((1 1) (9 5) (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((9 5) (8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((9 5) ((8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) list:member (8 5)}]
    <#lemma24>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma25>
  );
  r:rule <#lemma11>.

<#lemma22> a r:Inference;
  r:gives {
    ((9 8) (((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 4) (1 5) (4 0) (4 2) (5 1)) (((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 3) (1 4) (3 0) (3 2) (4 1)) (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 5) (1 6) (5 0) (5 2) (6 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 5) (1 6) (5 0) (5 2) (6 1)) (((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma26>
  );
  r:rule <#lemma8>.

<#lemma23> a r:Inference;
  r:gives {
    6 :next_to 5 .
  };
  r:evidence (
    [ a r:Fact; r:gives {6 math:greaterThan 0}]
    [ a r:Fact; r:gives {(6 -1) math:sum 5}]
  );
  r:rule <#lemma18>.

<#lemma24> a r:Inference;
  r:gives {
    (9 5) :neighbor (8 5).
  };
  r:evidence (
    <#lemma27>
  );
  r:rule <#lemma28>.

<#lemma25> a r:Inference;
  r:gives {
    ((1 1) (8 5) (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((8 5) (7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((8 5) ((7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) list:member (7 5)}]
    <#lemma29>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma30>
  );
  r:rule <#lemma11>.

<#lemma26> a r:Inference;
  r:gives {
    ((9 8) (((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 5) (1 6) (5 0) (5 2) (6 1)) (((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 4) (1 5) (4 0) (4 2) (5 1)) (((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) (((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma31>
  );
  r:rule <#lemma8>.

<#lemma27> a r:Inference;
  r:gives {
    9 :next_to 8 .
  };
  r:evidence (
    [ a r:Fact; r:gives {9 math:greaterThan 0}]
    [ a r:Fact; r:gives {(9 -1) math:sum 8}]
  );
  r:rule <#lemma18>.

<#lemma28> a r:Extraction;
  r:gives {
    {(?x_0_7 ?x_2_7) :neighbor (?x_1_7 ?x_2_7)} <= {?x_0_7 :next_to ?x_1_7}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

<#lemma29> a r:Inference;
  r:gives {
    (8 5) :neighbor (7 5).
  };
  r:evidence (
    <#lemma13>
  );
  r:rule <#lemma28>.

<#lemma30> a r:Inference;
  r:gives {
    ((1 1) (7 5) (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((7 5) (6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((7 5) ((6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) list:member (6 5)}]
    <#lemma32>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma33>
  );
  r:rule <#lemma11>.

<#lemma31> a r:Inference;
  r:gives {
    ((9 8) (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) (((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 5) (1 6) (5 0) (5 2) (6 1)) (((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma34>
  );
  r:rule <#lemma8>.

<#lemma32> a r:Inference;
  r:gives {
    (7 5) :neighbor (6 5).
  };
  r:evidence (
    <#lemma19>
  );
  r:rule <#lemma28>.

<#lemma33> a r:Inference;
  r:gives {
    ((1 1) (6 5) (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((6 5) (5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((6 5) ((5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) list:member (5 5)}]
    <#lemma35>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma36>
  );
  r:rule <#lemma11>.

<#lemma34> a r:Inference;
  r:gives {
    ((9 8) (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) (((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma37>
  );
  r:rule <#lemma8>.

<#lemma35> a r:Inference;
  r:gives {
    (6 5) :neighbor (5 5).
  };
  r:evidence (
    <#lemma23>
  );
  r:rule <#lemma28>.

<#lemma36> a r:Inference;
  r:gives {
    ((1 1) (5 5) (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((5 5) (5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((5 5) ((5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) list:member (5 4)}]
    <#lemma38>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma39>
  );
  r:rule <#lemma11>.

<#lemma37> a r:Inference;
  r:gives {
    ((9 8) (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma40>
  );
  r:rule <#lemma8>.

<#lemma38> a r:Inference;
  r:gives {
    (5 5) :neighbor (5 4).
  };
  r:evidence (
    <#lemma41>
  );
  r:rule <#lemma14>.

<#lemma39> a r:Inference;
  r:gives {
    ((1 1) (5 4) (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) (((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((5 4) (5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((5 4) ((5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) list:member (5 3)}]
    <#lemma42>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma43>
  );
  r:rule <#lemma11>.

<#lemma40> a r:Inference;
  r:gives {
    ((9 8) (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) (((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma44>
  );
  r:rule <#lemma8>.

<#lemma41> a r:Inference;
  r:gives {
    5 :next_to 4 .
  };
  r:evidence (
    [ a r:Fact; r:gives {5 math:greaterThan 0}]
    [ a r:Fact; r:gives {(5 -1) math:sum 4}]
  );
  r:rule <#lemma18>.

<#lemma42> a r:Inference;
  r:gives {
    (5 4) :neighbor (5 3).
  };
  r:evidence (
    <#lemma45>
  );
  r:rule <#lemma14>.

<#lemma43> a r:Inference;
  r:gives {
    ((1 1) (5 3) (((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 5) (1 6) (5 0) (5 2) (6 1)) (((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((5 3) (5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((5 3) ((5 2) (4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 5) (1 6) (5 0) (5 2) (6 1)) list:member (5 2)}]
    <#lemma46>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma47>
  );
  r:rule <#lemma11>.

<#lemma44> a r:Inference;
  r:gives {
    ((9 8) (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) (((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma48>
  );
  r:rule <#lemma8>.

<#lemma45> a r:Inference;
  r:gives {
    4 :next_to 3 .
  };
  r:evidence (
    [ a r:Fact; r:gives {4 math:greaterThan 0}]
    [ a r:Fact; r:gives {(4 -1) math:sum 3}]
  );
  r:rule <#lemma18>.

<#lemma46> a r:Inference;
  r:gives {
    (5 3) :neighbor (5 2).
  };
  r:evidence (
    <#lemma49>
  );
  r:rule <#lemma14>.

<#lemma47> a r:Inference;
  r:gives {
    ((1 1) (5 2) (((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((5 2) (4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 4) (1 5) (4 0) (4 2) (5 1)) (((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((5 2) (4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((5 2) ((4 2) (3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 4) (1 5) (4 0) (4 2) (5 1)) list:member (4 2)}]
    <#lemma50>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma51>
  );
  r:rule <#lemma11>.

<#lemma48> a r:Inference;
  r:gives {
    ((9 8) (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) (((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma52>
  );
  r:rule <#lemma8>.

<#lemma49> a r:Inference;
  r:gives {
    3 :next_to 2 .
  };
  r:evidence (
    [ a r:Fact; r:gives {3 math:greaterThan 0}]
    [ a r:Fact; r:gives {(3 -1) math:sum 2}]
  );
  r:rule <#lemma18>.

<#lemma50> a r:Inference;
  r:gives {
    (5 2) :neighbor (4 2).
  };
  r:evidence (
    <#lemma41>
  );
  r:rule <#lemma28>.

<#lemma51> a r:Inference;
  r:gives {
    ((1 1) (4 2) (((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((4 2) (3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 3) (1 4) (3 0) (3 2) (4 1)) (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((4 2) (3 2) (2 2) (1 2) (1 1)) e:firstRest ((4 2) ((3 2) (2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 3) (1 4) (3 0) (3 2) (4 1)) list:member (3 2)}]
    <#lemma53>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma54>
  );
  r:rule <#lemma11>.

<#lemma52> a r:Inference;
  r:gives {
    ((9 8) (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) (((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma55>
  );
  r:rule <#lemma8>.

<#lemma53> a r:Inference;
  r:gives {
    (4 2) :neighbor (3 2).
  };
  r:evidence (
    <#lemma45>
  );
  r:rule <#lemma28>.

<#lemma54> a r:Inference;
  r:gives {
    ((1 1) (3 2) (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((3 2) (2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) (((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((3 2) (2 2) (1 2) (1 1)) e:firstRest ((3 2) ((2 2) (1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) list:member (2 2)}]
    <#lemma56>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma57>
  );
  r:rule <#lemma11>.

<#lemma55> a r:Inference;
  r:gives {
    ((9 8) (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) (((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma58>
  );
  r:rule <#lemma8>.

<#lemma56> a r:Inference;
  r:gives {
    (3 2) :neighbor (2 2).
  };
  r:evidence (
    <#lemma49>
  );
  r:rule <#lemma28>.

<#lemma57> a r:Inference;
  r:gives {
    ((1 1) (2 2) (((0 1) (1 0) (1 2) (2 1)) ((1 1)) ())) :path ((2 2) (1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 1) (1 0) (1 2) (2 1)) (((1 1)) ()))}]
    [ a r:Fact; r:gives {((2 2) (1 2) (1 1)) e:firstRest ((2 2) ((1 2) (1 1)))}]
    [ a r:Fact; r:gives {((0 1) (1 0) (1 2) (2 1)) list:member (1 2)}]
    <#lemma59>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma60>
  );
  r:rule <#lemma11>.

<#lemma58> a r:Inference;
  r:gives {
    ((9 8) (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {(((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) (((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {("setof" ?V0 {(?V0 ((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1))) :admissible (((2 3) (4 5)) ((6 6) (8 8)))} ((0 15) (1 16) (2 15) (3 14) (4 13) (5 12) (6 11) (7 10) (8 9) (9 8) (10 7) (11 6) (12 5) (13 4) (14 3) (15 0) (15 2) (16 1))) e:derive true}]
    [ a r:Fact; r:gives {(((0 15) (1 16) (2 15) (3 14) (4 13) (5 12) (6 11) (7 10) (8 9) (9 8) (10 7) (11 6) (12 5) (13 4) (14 3) (15 0) (15 2) (16 1)) ((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 15) (1 16) (2 15) (3 14) (4 13) (5 12) (6 11) (7 10) (8 9) (9 8) (10 7) (11 6) (12 5) (13 4) (14 3) (15 0) (15 2) (16 1)) (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    <#lemma61>
  );
  r:rule <#lemma8>.

<#lemma59> a r:Inference;
  r:gives {
    (2 2) :neighbor (1 2).
  };
  r:evidence (
    <#lemma62>
  );
  r:rule <#lemma28>.

<#lemma60> a r:Inference;
  r:gives {
    ((1 1) (1 2) (((1 1)) ())) :path ((1 2) (1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((1 1)) ()) e:firstRest (((1 1)) (()))}]
    [ a r:Fact; r:gives {((1 2) (1 1)) e:firstRest ((1 2) ((1 1)))}]
    [ a r:Fact; r:gives {((1 1)) list:member (1 1)}]
    <#lemma63>
    [ a r:Fact; r:gives {("!") e:derive true}]
    <#lemma64>
  );
  r:rule <#lemma11>.

<#lemma61> a r:Inference;
  r:gives {
    ((9 8) (((0 15) (1 16) (2 15) (3 14) (4 13) (5 12) (6 11) (7 10) (8 9) (9 8) (10 7) (11 6) (12 5) (13 4) (14 3) (15 0) (15 2) (16 1)) ((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) (((2 3) (4 5)) ((6 6) (8 8)))) :waves (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()).
  };
  r:evidence (
    [ a r:Fact; r:gives {(((0 15) (1 16) (2 15) (3 14) (4 13) (5 12) (6 11) (7 10) (8 9) (9 8) (10 7) (11 6) (12 5) (13 4) (14 3) (15 0) (15 2) (16 1)) ((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()) e:firstRest (((0 15) (1 16) (2 15) (3 14) (4 13) (5 12) (6 11) (7 10) (8 9) (9 8) (10 7) (11 6) (12 5) (13 4) (14 3) (15 0) (15 2) (16 1)) (((0 14) (1 15) (2 14) (3 13) (4 12) (5 11) (6 10) (7 9) (9 7) (10 6) (11 5) (12 4) (13 3) (14 0) (14 2) (15 1)) ((0 13) (1 14) (2 13) (3 12) (4 11) (5 10) (6 9) (9 6) (10 5) (11 4) (12 3) (13 0) (13 2) (14 1)) ((0 12) (1 13) (2 12) (3 11) (4 10) (5 9) (9 5) (10 4) (11 3) (12 0) (12 2) (13 1)) ((0 11) (1 12) (2 11) (3 10) (4 9) (5 8) (8 5) (9 4) (10 3) (11 0) (11 2) (12 1)) ((0 10) (1 11) (2 10) (3 9) (4 8) (5 7) (7 5) (8 4) (9 3) (10 0) (10 2) (11 1)) ((0 9) (1 10) (2 9) (3 8) (4 7) (5 6) (6 5) (7 4) (8 3) (9 0) (9 2) (10 1)) ((0 8) (1 9) (2 8) (3 7) (4 6) (5 5) (6 4) (7 3) (8 0) (8 2) (9 1)) ((0 7) (1 8) (2 7) (3 6) (5 4) (6 3) (7 0) (7 2) (8 1)) ((0 6) (1 7) (2 6) (5 3) (6 0) (6 2) (7 1)) ((0 5) (1 6) (5 0) (5 2) (6 1)) ((0 4) (1 5) (4 0) (4 2) (5 1)) ((0 3) (1 4) (3 0) (3 2) (4 1)) ((0 0) (0 2) (1 3) (2 0) (2 2) (3 1)) ((0 1) (1 0) (1 2) (2 1)) ((1 1)) ()))}]
    [ a r:Fact; r:gives {((0 15) (1 16) (2 15) (3 14) (4 13) (5 12) (6 11) (7 10) (8 9) (9 8) (10 7) (11 6) (12 5) (13 4) (14 3) (15 0) (15 2) (16 1)) list:member (9 8)}]
    [ a r:Fact; r:gives {("!") e:derive true}]
  );
  r:rule <#lemma65>.

<#lemma62> a r:Inference;
  r:gives {
    2 :next_to 1 .
  };
  r:evidence (
    [ a r:Fact; r:gives {2 math:greaterThan 0}]
    [ a r:Fact; r:gives {(2 -1) math:sum 1}]
  );
  r:rule <#lemma18>.

<#lemma63> a r:Inference;
  r:gives {
    (1 2) :neighbor (1 1).
  };
  r:evidence (
    <#lemma62>
  );
  r:rule <#lemma14>.

<#lemma64> a r:Inference;
  r:gives {
    ((1 1) (1 1) (())) :path ((1 1)).
  };
  r:evidence (
    [ a r:Fact; r:gives {("!") e:derive true}]
  );
  r:rule <#lemma66>.

<#lemma65> a r:Extraction;
  r:gives {
    {(?x_3_8 ?x_0_8 ?x_4_8) :waves ?x_2_8} <= {?x_0_8 e:firstRest (?x_1_8 ?x_2_8).
     ?x_1_8 list:member ?x_3_8.
     ("!") e:derive true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

<#lemma66> a r:Extraction;
  r:gives {
    {(?x_0_9 ?x_0_9 ?x_1_9) :path (?x_0_9)} <= {("!") e:derive true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/lee/lee.n3>].

