#Processed by EYE v21.0608.1236 josd
#eye --wcache http://josd.github.io/eye/reasoning .. http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3 http://josd.github.io/eye/reasoning/fcm/fl-rules.n3 http://josd.github.io/eye/reasoning/fcm/example001P.n3 http://josd.github.io/eye/reasoning/fcm/example002P.n3 --query http://josd.github.io/eye/reasoning/fcm/example003Q.n3

PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX fl: <http://eulersharp.sourceforge.net/2003/03swap/fl-rules#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX fcm: <http://eulersharp.sourceforge.net/2006/02swap/fcm-plugin#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX func: <http://www.w3.org/2007/rif-builtin-function#>
PREFIX : <http://www.agfa.com/w3c/euler/case001#>
PREFIX r: <http://www.w3.org/2000/10/swap/reason#>

[] a r:Proof, r:Conjunction;
  r:component <#lemma1>;
  r:component <#lemma2>;
  r:component <#lemma3>;
  r:component <#lemma4>;
  r:component <#lemma5>;
  r:component <#lemma6>;
  r:component <#lemma7>;
  r:component <#lemma8>;
  r:gives {
    (:Ann :ChildAge) fl:pi 0.4167000000000005 .
    (:Ann :AdultAge) fl:pi 0.5832999999999995 .
    (:Ann owl:Thing) fl:pi 1.0 .
    (:Ann owl:Nothing) fl:pi 0.0 .
    (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
    (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
    (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
    (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
  }.

<#lemma1> a r:Inference;
  r:gives {
    (:Ann :ChildAge) fl:pi 0.4167000000000005 .
  };
  r:evidence (
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma2> a r:Inference;
  r:gives {
    (:Ann :AdultAge) fl:pi 0.5832999999999995 .
  };
  r:evidence (
    <#lemma11>
  );
  r:rule <#lemma10>.

<#lemma3> a r:Inference;
  r:gives {
    (:Ann owl:Thing) fl:pi 1.0 .
  };
  r:evidence (
    <#lemma12>
  );
  r:rule <#lemma10>.

<#lemma4> a r:Inference;
  r:gives {
    (:Ann owl:Nothing) fl:pi 0.0 .
  };
  r:evidence (
    <#lemma13>
  );
  r:rule <#lemma10>.

<#lemma5> a r:Inference;
  r:gives {
    (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
  };
  r:evidence (
    <#lemma14>
  );
  r:rule <#lemma10>.

<#lemma6> a r:Inference;
  r:gives {
    (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
  };
  r:evidence (
    <#lemma15>
  );
  r:rule <#lemma10>.

<#lemma7> a r:Inference;
  r:gives {
    (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
  };
  r:evidence (
    <#lemma16>
  );
  r:rule <#lemma10>.

<#lemma8> a r:Inference;
  r:gives {
    (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
  };
  r:evidence (
    <#lemma17>
  );
  r:rule <#lemma10>.

<#lemma9> a r:Inference;
  r:gives {
    (:Ann :ChildAge) fl:pi 0.4167000000000005 .
  };
  r:evidence (
    <#lemma18>
  );
  r:rule <#lemma19>.

<#lemma10> a r:Extraction;
  r:gives {
    {(?x_0_1 ?x_1_1) fl:pi ?x_2_1} => {(?x_0_1 ?x_1_1) fl:pi ?x_2_1}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/example003Q.n3>].

<#lemma11> a r:Inference;
  r:gives {
    (:Ann :AdultAge) fl:pi 0.5832999999999995 .
  };
  r:evidence (
    <#lemma20>
  );
  r:rule <#lemma19>.

<#lemma12> a r:Inference;
  r:gives {
    (:Ann owl:Thing) fl:pi 1.0 .
  };
  r:evidence (
    <#lemma21>
  );
  r:rule <#lemma19>.

<#lemma13> a r:Inference;
  r:gives {
    (:Ann owl:Nothing) fl:pi 0.0 .
  };
  r:evidence (
    <#lemma22>
  );
  r:rule <#lemma19>.

<#lemma14> a r:Inference;
  r:gives {
    (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
  };
  r:evidence (
    <#lemma23>
  );
  r:rule <#lemma19>.

<#lemma15> a r:Inference;
  r:gives {
    (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
  };
  r:evidence (
    <#lemma24>
  );
  r:rule <#lemma19>.

<#lemma16> a r:Inference;
  r:gives {
    (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
  };
  r:evidence (
    <#lemma25>
    <#lemma14>
    [ a r:Fact; r:gives {(1.0 0.42055693693538665) math:difference 0.5794430630646134}]
  );
  r:rule <#lemma26>.

<#lemma17> a r:Inference;
  r:gives {
    (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
  };
  r:evidence (
    <#lemma27>
    <#lemma15>
    [ a r:Fact; r:gives {(1.0 0.5762688313443307) math:difference 0.4237311686556693}]
  );
  r:rule <#lemma26>.

<#lemma18> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:ChildAge 0.4167000000000005).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi _:sk_12}} {0.4167000000000005 log:equalTo _:sk_12} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(?V0 ?V1) fl:mu ?V2} {("if_then_else" {(?V0) fcm:fm true} true {("assertz" {(?V0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("forall" {(?V0 ?V1) fl:sigma ?V3} {("if_then_else" {(?V0) fcm:fs true} true {("assertz" {(?V0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(?V1) fcm:fs true} true {("assertz" {(?V1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 ?V4) e:derive true.
      (?V0) fcm:fm true.
      (?V1) fcm:fs true.
      ("findall" ?V5 {(?V6 ?V1) fl:sigma ?V7.
       ?V0 fcm:pi (?V6 ?V8).
       ("(2*_M-1)*(2*_W-1)" ?V8 ?V7) e:calculate ?V5} ?V9) e:derive true.
      ("if_then_else" {?V9 log:equalTo ()} true {?V9 math:sum ?V10.
       ("1/(1+exp(-_S))" ?V10) e:calculate ?V2.
       ("retractall" {?V0 fcm:pi (?V1 ?V11)}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:ChildAge 0.4167000000000005)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi ?V0}} {0.4167000000000005 log:equalTo ?V0} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true}]
  );
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
      ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
       <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
       ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
      ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
       ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
       ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:ChildAge 0.4167000000000005).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.4167000000000005 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
       ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
        <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
        ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
       ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
        ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
        ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:ChildAge 0.4167000000000005).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.4167000000000005 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true}}}].

<#lemma19> a r:Extraction;
  r:gives {
    {(?x_13_3 ?x_14_3) fl:pi ?x_17_3} <= {?x_0_3 e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(?x_1_3 ?x_2_3) fl:mu ?x_3_3} {("if_then_else" {(?x_1_3) fcm:fm true} true {("assertz" {(?x_1_3) fcm:fm true}) e:derive true}) e:derive true.
         ("assertz" {?x_1_3 fcm:pi (?x_2_3 ?x_3_3)}) e:derive true}) e:derive true.
        ("forall" {(?x_1_3 ?x_2_3) fl:sigma ?x_4_3} {("if_then_else" {(?x_1_3) fcm:fs true} true {("assertz" {(?x_1_3) fcm:fs true}) e:derive true}) e:derive true.
         ("if_then_else" {(?x_2_3) fcm:fs true} true {("assertz" {(?x_2_3) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
        ("between" 1 20 ?x_5_3) e:derive true.
        (?x_1_3) fcm:fm true.
        (?x_2_3) fcm:fs true.
        ("findall" ?x_6_3 {(?x_7_3 ?x_2_3) fl:sigma ?x_8_3.
         ?x_1_3 fcm:pi (?x_7_3 ?x_9_3).
         ("(2*_M-1)*(2*_W-1)" ?x_9_3 ?x_8_3) e:calculate ?x_6_3} ?x_10_3) e:derive true.
        ("if_then_else" {?x_10_3 log:equalTo ()} true {?x_10_3 math:sum ?x_11_3.
         ("1/(1+exp(-_S))" ?x_11_3) e:calculate ?x_3_3.
         ("retractall" {?x_1_3 fcm:pi (?x_2_3 ?x_12_3)}) e:derive true.
         ("assertz" {?x_1_3 fcm:pi (?x_2_3 ?x_3_3)}) e:derive true}) e:derive true.
        ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
      ?x_13_3 fcm:pi (?x_14_3 ?x_15_3).
      ("if_then_else" {?x_0_3 e:closure {(?x_13_3 ?x_14_3) fl:pi ?x_16_3}} {?x_17_3 log:equalTo ?x_16_3} {?x_17_3 log:equalTo ?x_15_3}) e:derive true}}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3>].

<#lemma20> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:AdultAge 0.5832999999999995).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi _:sk_12}} {0.5832999999999995 log:equalTo _:sk_12} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(?V0 ?V1) fl:mu ?V2} {("if_then_else" {(?V0) fcm:fm true} true {("assertz" {(?V0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("forall" {(?V0 ?V1) fl:sigma ?V3} {("if_then_else" {(?V0) fcm:fs true} true {("assertz" {(?V0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(?V1) fcm:fs true} true {("assertz" {(?V1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 ?V4) e:derive true.
      (?V0) fcm:fm true.
      (?V1) fcm:fs true.
      ("findall" ?V5 {(?V6 ?V1) fl:sigma ?V7.
       ?V0 fcm:pi (?V6 ?V8).
       ("(2*_M-1)*(2*_W-1)" ?V8 ?V7) e:calculate ?V5} ?V9) e:derive true.
      ("if_then_else" {?V9 log:equalTo ()} true {?V9 math:sum ?V10.
       ("1/(1+exp(-_S))" ?V10) e:calculate ?V2.
       ("retractall" {?V0 fcm:pi (?V1 ?V11)}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:AdultAge 0.5832999999999995)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi ?V0}} {0.5832999999999995 log:equalTo ?V0} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true}]
  );
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
      ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
       <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
       ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
      ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
       ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
       ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:AdultAge 0.5832999999999995).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.5832999999999995 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
       ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
        <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
        ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
       ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
        ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
        ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:AdultAge 0.5832999999999995).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.5832999999999995 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true}}}].

<#lemma21> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Thing 1.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi _:sk_12}} {1.0 log:equalTo _:sk_12} {1.0 log:equalTo 1.0}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(?V0 ?V1) fl:mu ?V2} {("if_then_else" {(?V0) fcm:fm true} true {("assertz" {(?V0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("forall" {(?V0 ?V1) fl:sigma ?V3} {("if_then_else" {(?V0) fcm:fs true} true {("assertz" {(?V0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(?V1) fcm:fs true} true {("assertz" {(?V1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 ?V4) e:derive true.
      (?V0) fcm:fm true.
      (?V1) fcm:fs true.
      ("findall" ?V5 {(?V6 ?V1) fl:sigma ?V7.
       ?V0 fcm:pi (?V6 ?V8).
       ("(2*_M-1)*(2*_W-1)" ?V8 ?V7) e:calculate ?V5} ?V9) e:derive true.
      ("if_then_else" {?V9 log:equalTo ()} true {?V9 math:sum ?V10.
       ("1/(1+exp(-_S))" ?V10) e:calculate ?V2.
       ("retractall" {?V0 fcm:pi (?V1 ?V11)}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (owl:Thing 1.0)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi ?V0}} {1.0 log:equalTo ?V0} {1.0 log:equalTo 1.0}) e:derive true}]
  );
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
      ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
       <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
       ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
      ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
       ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
       ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (owl:Thing 1.0).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {1.0 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {1.0 log:equalTo 1.0}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
       ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
        <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
        ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
       ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
        ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
        ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Thing 1.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {1.0 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {1.0 log:equalTo 1.0}) e:derive true}}}].

<#lemma22> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Nothing 0.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi _:sk_12}} {0.0 log:equalTo _:sk_12} {0.0 log:equalTo 0.0}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(?V0 ?V1) fl:mu ?V2} {("if_then_else" {(?V0) fcm:fm true} true {("assertz" {(?V0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("forall" {(?V0 ?V1) fl:sigma ?V3} {("if_then_else" {(?V0) fcm:fs true} true {("assertz" {(?V0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(?V1) fcm:fs true} true {("assertz" {(?V1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 ?V4) e:derive true.
      (?V0) fcm:fm true.
      (?V1) fcm:fs true.
      ("findall" ?V5 {(?V6 ?V1) fl:sigma ?V7.
       ?V0 fcm:pi (?V6 ?V8).
       ("(2*_M-1)*(2*_W-1)" ?V8 ?V7) e:calculate ?V5} ?V9) e:derive true.
      ("if_then_else" {?V9 log:equalTo ()} true {?V9 math:sum ?V10.
       ("1/(1+exp(-_S))" ?V10) e:calculate ?V2.
       ("retractall" {?V0 fcm:pi (?V1 ?V11)}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (owl:Nothing 0.0)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi ?V0}} {0.0 log:equalTo ?V0} {0.0 log:equalTo 0.0}) e:derive true}]
  );
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
      ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
       <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
       ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
      ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
       ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
       ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (owl:Nothing 0.0).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.0 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.0 log:equalTo 0.0}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
       ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
        <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
        ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
       ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
        ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
        ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Nothing 0.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.0 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.0 log:equalTo 0.0}) e:derive true}}}].

<#lemma23> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi _:sk_12}} {0.42055693693538665 log:equalTo _:sk_12} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(?V0 ?V1) fl:mu ?V2} {("if_then_else" {(?V0) fcm:fm true} true {("assertz" {(?V0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("forall" {(?V0 ?V1) fl:sigma ?V3} {("if_then_else" {(?V0) fcm:fs true} true {("assertz" {(?V0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(?V1) fcm:fs true} true {("assertz" {(?V1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 ?V4) e:derive true.
      (?V0) fcm:fm true.
      (?V1) fcm:fs true.
      ("findall" ?V5 {(?V6 ?V1) fl:sigma ?V7.
       ?V0 fcm:pi (?V6 ?V8).
       ("(2*_M-1)*(2*_W-1)" ?V8 ?V7) e:calculate ?V5} ?V9) e:derive true.
      ("if_then_else" {?V9 log:equalTo ()} true {?V9 math:sum ?V10.
       ("1/(1+exp(-_S))" ?V10) e:calculate ?V2.
       ("retractall" {?V0 fcm:pi (?V1 ?V11)}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi ?V0}} {0.42055693693538665 log:equalTo ?V0} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true}]
  );
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
      ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
       <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
       ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
      ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
       ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
       ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.42055693693538665 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
       ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
        <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
        ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
       ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
        ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
        ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.42055693693538665 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true}}}].

<#lemma24> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi _:sk_12}} {0.5762688313443307 log:equalTo _:sk_12} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(?V0 ?V1) fl:mu ?V2} {("if_then_else" {(?V0) fcm:fm true} true {("assertz" {(?V0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("forall" {(?V0 ?V1) fl:sigma ?V3} {("if_then_else" {(?V0) fcm:fs true} true {("assertz" {(?V0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(?V1) fcm:fs true} true {("assertz" {(?V1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 ?V4) e:derive true.
      (?V0) fcm:fm true.
      (?V1) fcm:fs true.
      ("findall" ?V5 {(?V6 ?V1) fl:sigma ?V7.
       ?V0 fcm:pi (?V6 ?V8).
       ("(2*_M-1)*(2*_W-1)" ?V8 ?V7) e:calculate ?V5} ?V9) e:derive true.
      ("if_then_else" {?V9 log:equalTo ()} true {?V9 math:sum ?V10.
       ("1/(1+exp(-_S))" ?V10) e:calculate ?V2.
       ("retractall" {?V0 fcm:pi (?V1 ?V11)}) e:derive true.
       ("assertz" {?V0 fcm:pi (?V1 ?V2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi ?V0}} {0.5762688313443307 log:equalTo ?V0} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true}]
  );
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
      (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
      ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
       <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
       ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
      ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
       ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
       ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
       ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.5762688313443307 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:mu <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("forall" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_3>} {("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true} true {("assertz" {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_4>) e:derive true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0>) fcm:fm true.
       (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fcm:fs true.
       ("findall" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5> {(<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1>) fl:sigma <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>.
        <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_6> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8>).
        ("(2*_M-1)*(2*_W-1)" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_8> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_7>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_5>} <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9>) e:derive true.
       ("if_then_else" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> log:equalTo ()} true {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_9> math:sum <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>.
        ("1/(1+exp(-_S))" <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_10>) e:calculate <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>.
        ("retractall" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_11>)}) e:derive true.
        ("assertz" {<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_0> fcm:pi (<http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_1> <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_2>)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>}} {0.5762688313443307 log:equalTo <http://josd.github.io/.well-known/genid/vVI3BcIZgGoVEaxfMTVIX2vi8v8#x_12>} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true}}}].

<#lemma25> a r:Extraction;
  r:gives {
    :NonNormalIntraocularPressure owl:complementOf :NormalIntraocularPressure.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/example002P.n3>].

<#lemma26> a r:Extraction;
  r:gives {
    {?x_0_9 owl:complementOf ?x_1_9.
     (?x_2_9 ?x_1_9) fl:pi ?x_3_9.
     (1.0 ?x_3_9) math:difference ?x_4_9} => {(?x_2_9 ?x_0_9) fl:pi ?x_4_9}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3>].

<#lemma27> a r:Extraction;
  r:gives {
    :NonIncreasedIntraocularPressure owl:complementOf :IncreasedIntraocularPressure.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/example002P.n3>].

#2021-06-08T16:34:45.173Z in=76 out=8 ent=50 step=307 brake=6 inf=540567 sec=0.088 inf/sec=6142807
#ENDS

