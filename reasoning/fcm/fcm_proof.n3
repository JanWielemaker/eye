#Processed by EYE v20.1125.1710 josd
#eye --no-genid http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3 http://josd.github.io/eye/reasoning/fcm/fl-rules.n3 http://josd.github.io/eye/reasoning/fcm/example001P.n3 http://josd.github.io/eye/reasoning/fcm/example002P.n3 --query http://josd.github.io/eye/reasoning/fcm/example003Q.n3

@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix fl: <http://eulersharp.sourceforge.net/2003/03swap/fl-rules#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix fcm: <http://eulersharp.sourceforge.net/2006/02swap/fcm-plugin#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix : <http://www.agfa.com/w3c/euler/case001#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.

[] a r:Proof,r:Conjunction;
  r:component <#lemma1>;
  r:component <#lemma2>;
  r:component <#lemma3>;
  r:component <#lemma4>;
  r:component <#lemma5>;
  r:component <#lemma6>;
  r:component <#lemma7>;
  r:component <#lemma8>;
  r:gives {
    (:Ann :ChildAge) fl:pi 0.4167000000000005 .
    (:Ann :AdultAge) fl:pi 0.5832999999999995 .
    (:Ann owl:Thing) fl:pi 1.0 .
    (:Ann owl:Nothing) fl:pi 0.0 .
    (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
    (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
    (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
    (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
  }.

<#lemma1> a r:Inference;
  r:gives {
    (:Ann :ChildAge) fl:pi 0.4167000000000005 .
  };
  r:evidence (
    <#lemma9>
  );
  r:binding [ r:variable $x_2; r:boundTo 0.4167000000000005];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#ChildAge"]];
  r:rule <#lemma10>.

<#lemma2> a r:Inference;
  r:gives {
    (:Ann :AdultAge) fl:pi 0.5832999999999995 .
  };
  r:evidence (
    <#lemma11>
  );
  r:binding [ r:variable $x_2; r:boundTo 0.5832999999999995];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#AdultAge"]];
  r:rule <#lemma10>.

<#lemma3> a r:Inference;
  r:gives {
    (:Ann owl:Thing) fl:pi 1.0 .
  };
  r:evidence (
    <#lemma12>
  );
  r:binding [ r:variable $x_2; r:boundTo 1.0];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Thing"]];
  r:rule <#lemma10>.

<#lemma4> a r:Inference;
  r:gives {
    (:Ann owl:Nothing) fl:pi 0.0 .
  };
  r:evidence (
    <#lemma13>
  );
  r:binding [ r:variable $x_2; r:boundTo 0.0];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Nothing"]];
  r:rule <#lemma10>.

<#lemma5> a r:Inference;
  r:gives {
    (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
  };
  r:evidence (
    <#lemma14>
  );
  r:binding [ r:variable $x_2; r:boundTo 0.42055693693538665];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NormalIntraocularPressure"]];
  r:rule <#lemma10>.

<#lemma6> a r:Inference;
  r:gives {
    (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
  };
  r:evidence (
    <#lemma15>
  );
  r:binding [ r:variable $x_2; r:boundTo 0.5762688313443307];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#IncreasedIntraocularPressure"]];
  r:rule <#lemma10>.

<#lemma7> a r:Inference;
  r:gives {
    (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
  };
  r:evidence (
    <#lemma16>
  );
  r:binding [ r:variable $x_2; r:boundTo 0.5794430630646134];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonNormalIntraocularPressure"]];
  r:rule <#lemma10>.

<#lemma8> a r:Inference;
  r:gives {
    (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
  };
  r:evidence (
    <#lemma17>
  );
  r:binding [ r:variable $x_2; r:boundTo 0.4237311686556693];
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonIncreasedIntraocularPressure"]];
  r:rule <#lemma10>.

<#lemma9> a r:Inference;
  r:gives {
    (:Ann :ChildAge) fl:pi 0.4167000000000005 .
  };
  r:evidence (
    <#lemma18>
  );
  r:binding [ r:variable $x_0; r:boundTo ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_13; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_14; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#ChildAge"]];
  r:binding [ r:variable $x_15; r:boundTo 0.4167000000000005];
  r:binding [ r:variable $x_16; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:binding [ r:variable $x_17; r:boundTo 0.4167000000000005];
  r:rule <#lemma19>.

<#lemma10> a r:Extraction;
  r:gives {
    @forAll $x_0,$x_1,$x_2. {($x_0 $x_1) fl:pi $x_2} => {($x_0 $x_1) fl:pi $x_2}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/example003Q.n3>].

<#lemma11> a r:Inference;
  r:gives {
    (:Ann :AdultAge) fl:pi 0.5832999999999995 .
  };
  r:evidence (
    <#lemma20>
  );
  r:binding [ r:variable $x_0; r:boundTo ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_13; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_14; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#AdultAge"]];
  r:binding [ r:variable $x_15; r:boundTo 0.5832999999999995];
  r:binding [ r:variable $x_16; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:binding [ r:variable $x_17; r:boundTo 0.5832999999999995];
  r:rule <#lemma19>.

<#lemma12> a r:Inference;
  r:gives {
    (:Ann owl:Thing) fl:pi 1.0 .
  };
  r:evidence (
    <#lemma21>
  );
  r:binding [ r:variable $x_0; r:boundTo ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_13; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_14; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Thing"]];
  r:binding [ r:variable $x_15; r:boundTo 1.0];
  r:binding [ r:variable $x_16; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:binding [ r:variable $x_17; r:boundTo 1.0];
  r:rule <#lemma19>.

<#lemma13> a r:Inference;
  r:gives {
    (:Ann owl:Nothing) fl:pi 0.0 .
  };
  r:evidence (
    <#lemma22>
  );
  r:binding [ r:variable $x_0; r:boundTo ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_13; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_14; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Nothing"]];
  r:binding [ r:variable $x_15; r:boundTo 0.0];
  r:binding [ r:variable $x_16; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:binding [ r:variable $x_17; r:boundTo 0.0];
  r:rule <#lemma19>.

<#lemma14> a r:Inference;
  r:gives {
    (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
  };
  r:evidence (
    <#lemma23>
  );
  r:binding [ r:variable $x_0; r:boundTo ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_13; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_14; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NormalIntraocularPressure"]];
  r:binding [ r:variable $x_15; r:boundTo 0.42055693693538665];
  r:binding [ r:variable $x_16; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:binding [ r:variable $x_17; r:boundTo 0.42055693693538665];
  r:rule <#lemma19>.

<#lemma15> a r:Inference;
  r:gives {
    (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
  };
  r:evidence (
    <#lemma24>
  );
  r:binding [ r:variable $x_0; r:boundTo ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_13; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_14; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#IncreasedIntraocularPressure"]];
  r:binding [ r:variable $x_15; r:boundTo 0.5762688313443307];
  r:binding [ r:variable $x_16; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:binding [ r:variable $x_17; r:boundTo 0.5762688313443307];
  r:rule <#lemma19>.

<#lemma16> a r:Inference;
  r:gives {
    (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
  };
  r:evidence (
    <#lemma25>
    <#lemma14>
    [ a r:Fact; r:gives {(1.0 0.42055693693538665) math:difference 0.5794430630646134}]
  );
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonNormalIntraocularPressure"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NormalIntraocularPressure"]];
  r:binding [ r:variable $x_3; r:boundTo 0.42055693693538665];
  r:binding [ r:variable $x_2; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_4; r:boundTo 0.5794430630646134];
  r:rule <#lemma26>.

<#lemma17> a r:Inference;
  r:gives {
    (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
  };
  r:evidence (
    <#lemma27>
    <#lemma15>
    [ a r:Fact; r:gives {(1.0 0.5762688313443307) math:difference 0.4237311686556693}]
  );
  r:binding [ r:variable $x_0; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonIncreasedIntraocularPressure"]];
  r:binding [ r:variable $x_1; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#IncreasedIntraocularPressure"]];
  r:binding [ r:variable $x_3; r:boundTo 0.5762688313443307];
  r:binding [ r:variable $x_2; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
  r:binding [ r:variable $x_4; r:boundTo 0.4237311686556693];
  r:rule <#lemma26>.

<#lemma18> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:ChildAge 0.4167000000000005).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi _:sk_12}} {0.4167000000000005 log:equalTo _:sk_12} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 _:sk_4) e:derive true.
      (_:sk_0) fcm:fm true.
      (_:sk_1) fcm:fs true.
      ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
       _:sk_0 fcm:pi (_:sk_6 _:sk_8).
       ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
      ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
       ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
       ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:ChildAge 0.4167000000000005)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi _:sk_12}} {0.4167000000000005 log:equalTo _:sk_12} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true}]
  );
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_0; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 $x_4) e:derive true.
      ($x_0) fcm:fm true.
      ($x_1) fcm:fs true.
      ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
       $x_0 fcm:pi ($x_6 $x_8).
       ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
      ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
       ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
       ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:ChildAge 0.4167000000000005).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi $x_12}} {0.4167000000000005 log:equalTo $x_12} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 $x_4) e:derive true.
       ($x_0) fcm:fm true.
       ($x_1) fcm:fs true.
       ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
        $x_0 fcm:pi ($x_6 $x_8).
        ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
       ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
        ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
        ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:ChildAge 0.4167000000000005).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :ChildAge) fl:pi $x_12}} {0.4167000000000005 log:equalTo $x_12} {0.4167000000000005 log:equalTo 0.4167000000000005}) e:derive true}}}].

<#lemma19> a r:Extraction;
  r:gives {
    @forAll $x_0,$x_1,$x_2,$x_3,$x_4,$x_5,$x_6,$x_7,$x_8,$x_9,$x_10,$x_11,$x_12,$x_13,$x_14,$x_15,$x_16,$x_17. {($x_13 $x_14) fl:pi $x_17} <= {$x_0 e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_1 $x_2) fl:mu $x_3} {("if_then_else" {($x_1) fcm:fm true} true {("assertz" {($x_1) fcm:fm true}) e:derive true}) e:derive true.
         ("assertz" {$x_1 fcm:pi ($x_2 $x_3)}) e:derive true}) e:derive true.
        ("forall" {($x_1 $x_2) fl:sigma $x_4} {("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true.
         ("if_then_else" {($x_2) fcm:fs true} true {("assertz" {($x_2) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
        ("between" 1 20 $x_5) e:derive true.
        ($x_1) fcm:fm true.
        ($x_2) fcm:fs true.
        ("findall" $x_6 {($x_7 $x_2) fl:sigma $x_8.
         $x_1 fcm:pi ($x_7 $x_9).
         ("(2*_M-1)*(2*_W-1)" $x_9 $x_8) e:calculate $x_6} $x_10) e:derive true.
        ("if_then_else" {$x_10 log:equalTo ()} true {$x_10 math:sum $x_11.
         ("1/(1+exp(-_S))" $x_11) e:calculate $x_3.
         ("retractall" {$x_1 fcm:pi ($x_2 $x_12)}) e:derive true.
         ("assertz" {$x_1 fcm:pi ($x_2 $x_3)}) e:derive true}) e:derive true.
        ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
      $x_13 fcm:pi ($x_14 $x_15).
      ("if_then_else" {$x_0 e:closure {($x_13 $x_14) fl:pi $x_16}} {$x_17 log:equalTo $x_16} {$x_17 log:equalTo $x_15}) e:derive true}}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3>].

<#lemma20> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:AdultAge 0.5832999999999995).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi _:sk_12}} {0.5832999999999995 log:equalTo _:sk_12} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 _:sk_4) e:derive true.
      (_:sk_0) fcm:fm true.
      (_:sk_1) fcm:fs true.
      ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
       _:sk_0 fcm:pi (_:sk_6 _:sk_8).
       ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
      ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
       ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
       ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:AdultAge 0.5832999999999995)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi _:sk_12}} {0.5832999999999995 log:equalTo _:sk_12} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true}]
  );
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_0; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 $x_4) e:derive true.
      ($x_0) fcm:fm true.
      ($x_1) fcm:fs true.
      ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
       $x_0 fcm:pi ($x_6 $x_8).
       ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
      ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
       ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
       ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:AdultAge 0.5832999999999995).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi $x_12}} {0.5832999999999995 log:equalTo $x_12} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 $x_4) e:derive true.
       ($x_0) fcm:fm true.
       ($x_1) fcm:fs true.
       ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
        $x_0 fcm:pi ($x_6 $x_8).
        ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
       ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
        ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
        ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:AdultAge 0.5832999999999995).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :AdultAge) fl:pi $x_12}} {0.5832999999999995 log:equalTo $x_12} {0.5832999999999995 log:equalTo 0.5832999999999995}) e:derive true}}}].

<#lemma21> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Thing 1.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi _:sk_12}} {1.0 log:equalTo _:sk_12} {1.0 log:equalTo 1.0}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 _:sk_4) e:derive true.
      (_:sk_0) fcm:fm true.
      (_:sk_1) fcm:fs true.
      ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
       _:sk_0 fcm:pi (_:sk_6 _:sk_8).
       ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
      ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
       ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
       ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (owl:Thing 1.0)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi _:sk_12}} {1.0 log:equalTo _:sk_12} {1.0 log:equalTo 1.0}) e:derive true}]
  );
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_0; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 $x_4) e:derive true.
      ($x_0) fcm:fm true.
      ($x_1) fcm:fs true.
      ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
       $x_0 fcm:pi ($x_6 $x_8).
       ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
      ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
       ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
       ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (owl:Thing 1.0).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi $x_12}} {1.0 log:equalTo $x_12} {1.0 log:equalTo 1.0}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 $x_4) e:derive true.
       ($x_0) fcm:fm true.
       ($x_1) fcm:fs true.
       ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
        $x_0 fcm:pi ($x_6 $x_8).
        ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
       ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
        ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
        ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Thing 1.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Thing) fl:pi $x_12}} {1.0 log:equalTo $x_12} {1.0 log:equalTo 1.0}) e:derive true}}}].

<#lemma22> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Nothing 0.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi _:sk_12}} {0.0 log:equalTo _:sk_12} {0.0 log:equalTo 0.0}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 _:sk_4) e:derive true.
      (_:sk_0) fcm:fm true.
      (_:sk_1) fcm:fs true.
      ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
       _:sk_0 fcm:pi (_:sk_6 _:sk_8).
       ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
      ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
       ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
       ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (owl:Nothing 0.0)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi _:sk_12}} {0.0 log:equalTo _:sk_12} {0.0 log:equalTo 0.0}) e:derive true}]
  );
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_0; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 $x_4) e:derive true.
      ($x_0) fcm:fm true.
      ($x_1) fcm:fs true.
      ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
       $x_0 fcm:pi ($x_6 $x_8).
       ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
      ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
       ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
       ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (owl:Nothing 0.0).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi $x_12}} {0.0 log:equalTo $x_12} {0.0 log:equalTo 0.0}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 $x_4) e:derive true.
       ($x_0) fcm:fm true.
       ($x_1) fcm:fs true.
       ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
        $x_0 fcm:pi ($x_6 $x_8).
        ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
       ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
        ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
        ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (owl:Nothing 0.0).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann owl:Nothing) fl:pi $x_12}} {0.0 log:equalTo $x_12} {0.0 log:equalTo 0.0}) e:derive true}}}].

<#lemma23> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi _:sk_12}} {0.42055693693538665 log:equalTo _:sk_12} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 _:sk_4) e:derive true.
      (_:sk_0) fcm:fm true.
      (_:sk_1) fcm:fs true.
      ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
       _:sk_0 fcm:pi (_:sk_6 _:sk_8).
       ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
      ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
       ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
       ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi _:sk_12}} {0.42055693693538665 log:equalTo _:sk_12} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true}]
  );
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_0; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 $x_4) e:derive true.
      ($x_0) fcm:fm true.
      ($x_1) fcm:fs true.
      ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
       $x_0 fcm:pi ($x_6 $x_8).
       ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
      ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
       ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
       ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi $x_12}} {0.42055693693538665 log:equalTo $x_12} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 $x_4) e:derive true.
       ($x_0) fcm:fm true.
       ($x_1) fcm:fs true.
       ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
        $x_0 fcm:pi ($x_6 $x_8).
        ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
       ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
        ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
        ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :NormalIntraocularPressure) fl:pi $x_12}} {0.42055693693538665 log:equalTo $x_12} {0.42055693693538665 log:equalTo 0.42055693693538665}) e:derive true}}}].

<#lemma24> a r:Inference;
  r:gives {
    ((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 _:sk_4) e:derive true.
       (_:sk_0) fcm:fm true.
       (_:sk_1) fcm:fs true.
       ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
       ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
        ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
        ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi _:sk_12}} {0.5762688313443307 log:equalTo _:sk_12} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true}.
  };
  r:evidence (
    [ a r:Fact; r:gives {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {(_:sk_0 _:sk_1) fl:mu _:sk_2} {("if_then_else" {(_:sk_0) fcm:fm true} true {("assertz" {(_:sk_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("forall" {(_:sk_0 _:sk_1) fl:sigma _:sk_3} {("if_then_else" {(_:sk_0) fcm:fs true} true {("assertz" {(_:sk_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {(_:sk_1) fcm:fs true} true {("assertz" {(_:sk_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 _:sk_4) e:derive true.
      (_:sk_0) fcm:fm true.
      (_:sk_1) fcm:fs true.
      ("findall" _:sk_5 {(_:sk_6 _:sk_1) fl:sigma _:sk_7.
       _:sk_0 fcm:pi (_:sk_6 _:sk_8).
       ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5} _:sk_9) e:derive true.
      ("if_then_else" {_:sk_9 log:equalTo ()} true {_:sk_9 math:sum _:sk_10.
       ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
       ("retractall" {_:sk_0 fcm:pi (_:sk_1 _:sk_11)}) e:derive true.
       ("assertz" {_:sk_0 fcm:pi (_:sk_1 _:sk_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true}]
    [ a r:Fact; r:gives {:Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307)}]
    [ a r:Fact; r:gives {("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi _:sk_12}} {0.5762688313443307 log:equalTo _:sk_12} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true}]
  );
  r:binding [ r:variable $x_2; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
  r:binding [ r:variable $x_0; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
  r:binding [ r:variable $x_1; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
  r:binding [ r:variable $x_3; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
  r:binding [ r:variable $x_4; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
  r:binding [ r:variable $x_5; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
  r:binding [ r:variable $x_7; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
  r:binding [ r:variable $x_6; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
  r:binding [ r:variable $x_8; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
  r:binding [ r:variable $x_9; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
  r:binding [ r:variable $x_10; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
  r:binding [ r:variable $x_11; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
  r:binding [ r:variable $x_12; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
  r:rule [ a r:Fact; r:gives {{("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
       ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
      ("between" 1 20 $x_4) e:derive true.
      ($x_0) fcm:fm true.
      ($x_1) fcm:fs true.
      ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
       $x_0 fcm:pi ($x_6 $x_8).
       ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
      ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
       ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
       ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
       ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
      ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
    :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
    ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi $x_12}} {0.5762688313443307 log:equalTo $x_12} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true} => {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {("if_then_else" {("nb_getval" "fnet" "done") e:derive true} true {(";" {("forall" {($x_0 $x_1) fl:mu $x_2} {("if_then_else" {($x_0) fcm:fm true} true {("assertz" {($x_0) fcm:fm true}) e:derive true}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("forall" {($x_0 $x_1) fl:sigma $x_3} {("if_then_else" {($x_0) fcm:fs true} true {("assertz" {($x_0) fcm:fs true}) e:derive true}) e:derive true.
        ("if_then_else" {($x_1) fcm:fs true} true {("assertz" {($x_1) fcm:fs true}) e:derive true}) e:derive true}) e:derive true.
       ("between" 1 20 $x_4) e:derive true.
       ($x_0) fcm:fm true.
       ($x_1) fcm:fs true.
       ("findall" $x_5 {($x_6 $x_1) fl:sigma $x_7.
        $x_0 fcm:pi ($x_6 $x_8).
        ("(2*_M-1)*(2*_W-1)" $x_8 $x_7) e:calculate $x_5} $x_9) e:derive true.
       ("if_then_else" {$x_9 log:equalTo ()} true {$x_9 math:sum $x_10.
        ("1/(1+exp(-_S))" $x_10) e:calculate $x_2.
        ("retractall" {$x_0 fcm:pi ($x_1 $x_11)}) e:derive true.
        ("assertz" {$x_0 fcm:pi ($x_1 $x_2)}) e:derive true}) e:derive true.
       ("fail") e:derive true} {("nb_setval" "fnet" "done") e:derive true}) e:derive true}) e:derive true.
     :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
     ("if_then_else" {((<http://josd.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3> <http://josd.github.io/eye/reasoning/fcm/example001P.n3> <http://josd.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {(:Ann :IncreasedIntraocularPressure) fl:pi $x_12}} {0.5762688313443307 log:equalTo $x_12} {0.5762688313443307 log:equalTo 0.5762688313443307}) e:derive true}}}].

<#lemma25> a r:Extraction;
  r:gives {
    :NonNormalIntraocularPressure owl:complementOf :NormalIntraocularPressure.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/example002P.n3>].

<#lemma26> a r:Extraction;
  r:gives {
    @forAll $x_0,$x_1,$x_2,$x_3,$x_4. {$x_0 owl:complementOf $x_1.
     ($x_2 $x_1) fl:pi $x_3.
     (1.0 $x_3) math:difference $x_4} => {($x_2 $x_0) fl:pi $x_4}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/fl-rules.n3>].

<#lemma27> a r:Extraction;
  r:gives {
    :NonIncreasedIntraocularPressure owl:complementOf :IncreasedIntraocularPressure.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/reasoning/fcm/example002P.n3>].

#2020-11-27T21:59:22.657Z in=76 out=8 ent=50 step=307 brake=6 inf=524654 sec=0.094 inf/sec=5581426
#ENDS

